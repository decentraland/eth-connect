import { AbiInput, AbiOutput, BigNumber as bn } from '../dist/eth-connect'
import expect from 'expect'
import { coder } from '../src/solidity/coder'
import { hexToBytes, isArray, isBigNumber } from '../src'
import { formatParamType, Tuple } from '../src/abi/coder'

var packUnpackTests: Array<{ def: Partial<AbiOutput>[]; packed: string; unpacked: any }> = [
  // Booleans
  {
    def: [{ type: 'bool' }],
    packed: '0000000000000000000000000000000000000000000000000000000000000001',
    unpacked: [true]
  },
  {
    def: [{ type: 'bool' }],
    packed: '0000000000000000000000000000000000000000000000000000000000000000',
    unpacked: [false]
  },
  // Integers
  {
    def: [{ type: 'uint8' }],
    unpacked: [2],
    packed: '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'uint256' }],
    unpacked: [new bn(10)],
    packed: '000000000000000000000000000000000000000000000000000000000000000a'
  },
  {
    def: [{ type: 'uint8[]' }],
    unpacked: [[1, 2]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'uint16' }],
    unpacked: [5],
    packed: '0000000000000000000000000000000000000000000000000000000000000005'
  },
  {
    def: [{ type: 'uint16[]' }],
    unpacked: [[1, 2]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'uint16' }],
    packed: '0000000000000000000000000000000000000000000000000000000000000001',
    unpacked: [1]
  },
  {
    def: [{ type: 'uint32' }],
    packed: '0000000000000000000000000000000000000000000000000000000000000001',
    unpacked: [1]
  },
  {
    def: [{ type: 'uint32[]' }],
    unpacked: [[1, 2]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'uint64' }],
    unpacked: [new bn(6)],
    packed: '0000000000000000000000000000000000000000000000000000000000000006'
  },
  {
    def: [{ type: 'uint64[]' }],
    unpacked: [[new bn(1), new bn(2)]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'uint256' }],
    unpacked: [new bn(11)],
    packed: '000000000000000000000000000000000000000000000000000000000000000b'
  },
  {
    def: [{ type: 'uint256[]' }],
    unpacked: [[new bn(1), new bn(2)]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int8' }],
    unpacked: [2],
    packed: '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int8[]' }],
    unpacked: [[1, 2]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int16' }],
    unpacked: [2],
    packed: '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int16[]' }],
    unpacked: [[1, 2]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int32' }],
    unpacked: [2],
    packed: '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int32' }],
    packed: '0000000000000000000000000000000000000000000000000000000000000001',
    unpacked: [1]
  },
  {
    def: [{ type: 'int32[]' }],
    unpacked: [[1, 2]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int64' }],
    unpacked: [new bn(2)],
    packed: '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int64[]' }],
    unpacked: [[new bn(1), new bn(2)]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int256' }],
    unpacked: [new bn(2)],
    packed: '0000000000000000000000000000000000000000000000000000000000000002'
  },
  {
    def: [{ type: 'int256' }],
    packed: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    unpacked: [new bn(-1)]
  },
  {
    def: [{ type: 'int256[]' }],
    unpacked: [[new bn(1), new bn(2)]],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002'
  },
  // Address
  {
    def: [{ type: 'address' }],
    packed: '0000000000000000000000000100000000000000000000000000000000000000',
    unpacked: ['0x0100000000000000000000000000000000000000']
  },
  {
    def: [{ type: 'address[]' }],
    unpacked: [['0x0100000000000000000000000000000000000000', '0x0200000000000000000000000000000000000000']],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000100000000000000000000000000000000000000' +
      '0000000000000000000000000200000000000000000000000000000000000000'
  },
  // Bytes
  {
    def: [{ type: 'bytes1' }],
    unpacked: [hexToBytes('0x01')],
    packed: '0100000000000000000000000000000000000000000000000000000000000000'
  },
  {
    def: [{ type: 'bytes2' }],
    unpacked: [hexToBytes('0100')],
    packed: '0100000000000000000000000000000000000000000000000000000000000000'
  },
  {
    def: [{ type: 'bytes3' }],
    unpacked: [hexToBytes('010000')],
    packed: '0100000000000000000000000000000000000000000000000000000000000000'
  },
  {
    def: [{ type: 'bytes32' }],
    packed: '0100000000000000000000000000000000000000000000000000000000000000',
    unpacked: [hexToBytes('0100000000000000000000000000000000000000000000000000000000000000')]
  },
  {
    def: [{ type: 'bytes' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0100000000000000000000000000000000000000000000000000000000000000',
    unpacked: [hexToBytes('0100000000000000000000000000000000000000000000000000000000000000')]
  },
  // TODO:
  // Functions
  {
    def: [{ type: 'function' }],
    packed: '0100000000000000000000000000000000000000000000000000000000000000',
    unpacked: [hexToBytes('0x010000000000000000000000000000000000000000000000')]
  },

  // Slice and Array
  {
    def: [{ type: 'uint8[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'uint8[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000000',
    unpacked: [[]]
  },
  {
    def: [{ type: 'uint256[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000000',
    unpacked: [[]]
  },
  {
    def: [{ type: 'uint8[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'int8[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'int16[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'int16[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'int32[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'int32[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'int64[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[new bn(1), new bn(2)]]
  },
  {
    def: [{ type: 'int64[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[new bn(1), new bn(2)]]
  },
  {
    def: [{ type: 'int256[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[new bn(1), new bn(2)]]
  },
  {
    def: [{ type: 'int256[3]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000003',
    unpacked: [[new bn(1), new bn(2), new bn(3)]]
  },
  // multi dimensional, if these pass, all types that don't require length prefix should pass
  {
    def: [{ type: 'uint8[][]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000000',
    unpacked: [[]]
  },
  {
    def: [{ type: 'uint8[][]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000040' +
      '00000000000000000000000000000000000000000000000000000000000000a0' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [
      [
        [1, 2],
        [1, 2]
      ]
    ]
  },
  {
    def: [{ type: 'uint8[][]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000040' +
      '00000000000000000000000000000000000000000000000000000000000000a0' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000003' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000003',
    unpacked: [
      [
        [1, 2],
        [1, 2, 3]
      ]
    ]
  },
  {
    def: [{ type: 'uint8[][2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000040' +
      '0000000000000000000000000000000000000000000000000000000000000060' +
      '0000000000000000000000000000000000000000000000000000000000000000' +
      '0000000000000000000000000000000000000000000000000000000000000000',
    unpacked: [[[], []]]
  },
  {
    def: [{ type: 'uint8[2][2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [
      [
        [1, 2],
        [1, 2]
      ]
    ]
  },
  {
    def: [{ type: 'uint8[][2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000040' +
      '0000000000000000000000000000000000000000000000000000000000000080' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000001',
    unpacked: [[[1], [1]]]
  },
  {
    def: [{ type: 'uint8[2][]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000000',
    unpacked: [[]]
  },
  {
    def: [{ type: 'uint8[2][]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[[1, 2]]]
  },
  {
    def: [{ type: 'uint8[2][]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [
      [
        [1, 2],
        [1, 2]
      ]
    ]
  },
  {
    def: [{ type: 'uint16[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'uint16[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'uint32[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'uint32[2][3][4]' }],
    unpacked: [
      [
        [
          [1, 2],
          [3, 4],
          [5, 6]
        ],
        [
          [7, 8],
          [9, 10],
          [11, 12]
        ],
        [
          [13, 14],
          [15, 16],
          [17, 18]
        ],
        [
          [19, 20],
          [21, 22],
          [23, 24]
        ]
      ]
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000003' +
      '0000000000000000000000000000000000000000000000000000000000000004' +
      '0000000000000000000000000000000000000000000000000000000000000005' +
      '0000000000000000000000000000000000000000000000000000000000000006' +
      '0000000000000000000000000000000000000000000000000000000000000007' +
      '0000000000000000000000000000000000000000000000000000000000000008' +
      '0000000000000000000000000000000000000000000000000000000000000009' +
      '000000000000000000000000000000000000000000000000000000000000000a' +
      '000000000000000000000000000000000000000000000000000000000000000b' +
      '000000000000000000000000000000000000000000000000000000000000000c' +
      '000000000000000000000000000000000000000000000000000000000000000d' +
      '000000000000000000000000000000000000000000000000000000000000000e' +
      '000000000000000000000000000000000000000000000000000000000000000f' +
      '0000000000000000000000000000000000000000000000000000000000000010' +
      '0000000000000000000000000000000000000000000000000000000000000011' +
      '0000000000000000000000000000000000000000000000000000000000000012' +
      '0000000000000000000000000000000000000000000000000000000000000013' +
      '0000000000000000000000000000000000000000000000000000000000000014' +
      '0000000000000000000000000000000000000000000000000000000000000015' +
      '0000000000000000000000000000000000000000000000000000000000000016' +
      '0000000000000000000000000000000000000000000000000000000000000017' +
      '0000000000000000000000000000000000000000000000000000000000000018'
  },

  {
    def: [{ type: 'bytes32[]' }],
    unpacked: [
      [
        hexToBytes('0100000000000000000000000000000000000000000000000000000000000000'),
        hexToBytes('0200000000000000000000000000000000000000000000000000000000000000')
      ]
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0100000000000000000000000000000000000000000000000000000000000000' +
      '0200000000000000000000000000000000000000000000000000000000000000'
  },
  {
    def: [{ type: 'uint32[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[1, 2]]
  },
  {
    def: [{ type: 'uint128[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[new bn(1), new bn(2)]]
  },
  {
    def: [{ type: 'uint64[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[new bn(1), new bn(2)]]
  },
  {
    def: [{ type: 'uint64[2]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[new bn(1), new bn(2)]]
  },
  {
    def: [{ type: 'uint256[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [[new bn(1), new bn(2)]]
  },
  {
    def: [{ type: 'uint256[3]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000003',
    unpacked: [[new bn(1), new bn(2), new bn(3)]]
  },
  {
    def: [{ type: 'string[4]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000080' +
      '00000000000000000000000000000000000000000000000000000000000000c0' +
      '0000000000000000000000000000000000000000000000000000000000000100' +
      '0000000000000000000000000000000000000000000000000000000000000140' +
      '0000000000000000000000000000000000000000000000000000000000000005' +
      '48656c6c6f000000000000000000000000000000000000000000000000000000' +
      '0000000000000000000000000000000000000000000000000000000000000005' +
      '576f726c64000000000000000000000000000000000000000000000000000000' +
      '000000000000000000000000000000000000000000000000000000000000000b' +
      '476f2d657468657265756d000000000000000000000000000000000000000000' +
      '0000000000000000000000000000000000000000000000000000000000000008' +
      '457468657265756d000000000000000000000000000000000000000000000000',
    unpacked: [['Hello', 'World', 'Go-ethereum', 'Ethereum']]
  },
  {
    def: [{ type: 'string[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000040' +
      '0000000000000000000000000000000000000000000000000000000000000080' +
      '0000000000000000000000000000000000000000000000000000000000000008' +
      '457468657265756d000000000000000000000000000000000000000000000000' +
      '000000000000000000000000000000000000000000000000000000000000000b' +
      '676f2d657468657265756d000000000000000000000000000000000000000000',
    unpacked: [['Ethereum', 'go-ethereum']]
  },
  {
    def: [{ type: 'bytes[]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000040' +
      '0000000000000000000000000000000000000000000000000000000000000080' +
      '0000000000000000000000000000000000000000000000000000000000000003' +
      'f0f0f00000000000000000000000000000000000000000000000000000000000' +
      '0000000000000000000000000000000000000000000000000000000000000003' +
      'f0f0f00000000000000000000000000000000000000000000000000000000000',
    unpacked: [[hexToBytes('f0f0f0'), hexToBytes('f0f0f0')]]
  },
  {
    def: [{ type: 'uint256[2][][]' }],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000040' +
      '00000000000000000000000000000000000000000000000000000000000000e0' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '00000000000000000000000000000000000000000000000000000000000000c8' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '00000000000000000000000000000000000000000000000000000000000003e8' +
      '0000000000000000000000000000000000000000000000000000000000000002' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '00000000000000000000000000000000000000000000000000000000000000c8' +
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '00000000000000000000000000000000000000000000000000000000000003e8',
    unpacked: [
      [
        [
          [new bn(1), new bn(200)],
          [new bn(1), new bn(1000)]
        ],
        [
          [new bn(1), new bn(200)],
          [new bn(1), new bn(1000)]
        ]
      ]
    ]
  },
  // struct outputs
  {
    def: [
      {
        components: [
          { name: 'int1', type: 'int256' },
          { name: 'int2', type: 'int256' }
        ],
        type: 'tuple'
      }
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [
      {
        int1: new bn(1),
        int2: new bn(2)
      }
    ]
  },
  {
    def: [{ components: [{ name: 'int_one', type: 'int256' }], type: 'tuple' }],
    packed: '0000000000000000000000000000000000000000000000000000000000000001',
    unpacked: [
      {
        int_one: new bn(1)
      }
    ]
  },
  {
    def: [{ components: [{ name: 'int__one', type: 'int256' }], type: 'tuple' }],
    packed: '0000000000000000000000000000000000000000000000000000000000000001',
    unpacked: [
      {
        int__one: new bn(1)
      }
    ]
  },
  {
    def: [{ components: [{ name: 'int_one_', type: 'int256' }], type: 'tuple' }],
    packed: '0000000000000000000000000000000000000000000000000000000000000001',
    unpacked: [
      {
        int_one_: new bn(1)
      }
    ]
  },
  {
    def: [
      {
        components: [
          { name: 'int_one', type: 'int256' },
          { name: 'intone', type: 'int256' }
        ],
        type: 'tuple'
      }
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' +
      '0000000000000000000000000000000000000000000000000000000000000002',
    unpacked: [
      {
        int_one: new bn(1),
        intone: new bn(2)
      }
    ]
  },
  {
    def: [{ type: 'string' }],
    unpacked: ['foobar'],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000006' +
      '666f6f6261720000000000000000000000000000000000000000000000000000'
  },
  {
    def: [{ type: 'string[]' }],
    unpacked: [['hello', 'foobar']],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' + // len(array) = 2
      '0000000000000000000000000000000000000000000000000000000000000040' + // offset 64 to i = 0
      '0000000000000000000000000000000000000000000000000000000000000080' + // offset 128 to i = 1
      '0000000000000000000000000000000000000000000000000000000000000005' + // len(str[0]) = 5
      '68656c6c6f000000000000000000000000000000000000000000000000000000' + // str[0]
      '0000000000000000000000000000000000000000000000000000000000000006' + // len(str[1]) = 6
      '666f6f6261720000000000000000000000000000000000000000000000000000' // str[1]
  },
  {
    def: [{ type: 'string[2]' }],
    unpacked: [['hello', 'foobar']],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000040' + // offset to i = 0
      '0000000000000000000000000000000000000000000000000000000000000080' + // offset to i = 1
      '0000000000000000000000000000000000000000000000000000000000000005' + // len(str[0]) = 5
      '68656c6c6f000000000000000000000000000000000000000000000000000000' + // str[0]
      '0000000000000000000000000000000000000000000000000000000000000006' + // len(str[1]) = 6
      '666f6f6261720000000000000000000000000000000000000000000000000000' // str[1]
  },
  {
    def: [{ type: 'bytes32[][]' }],
    unpacked: [
      [
        [
          hexToBytes('0100000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0200000000000000000000000000000000000000000000000000000000000000')
        ],
        [
          hexToBytes('0300000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0400000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0500000000000000000000000000000000000000000000000000000000000000')
        ]
      ]
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' + // len(array) = 2
      '0000000000000000000000000000000000000000000000000000000000000040' + // offset 64 to i = 0
      '00000000000000000000000000000000000000000000000000000000000000a0' + // offset 160 to i = 1
      '0000000000000000000000000000000000000000000000000000000000000002' + // len(array[0]) = 2
      '0100000000000000000000000000000000000000000000000000000000000000' + // array[0][0]
      '0200000000000000000000000000000000000000000000000000000000000000' + // array[0][1]
      '0000000000000000000000000000000000000000000000000000000000000003' + // len(array[1]) = 3
      '0300000000000000000000000000000000000000000000000000000000000000' + // array[1][0]
      '0400000000000000000000000000000000000000000000000000000000000000' + // array[1][1]
      '0500000000000000000000000000000000000000000000000000000000000000' // array[1][2]
  },
  {
    def: [{ type: 'bytes32[][2]' }],
    unpacked: [
      [
        [
          hexToBytes('0100000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0200000000000000000000000000000000000000000000000000000000000000')
        ],
        [
          hexToBytes('0300000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0400000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0500000000000000000000000000000000000000000000000000000000000000')
        ]
      ]
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000040' + // offset 64 to i = 0
      '00000000000000000000000000000000000000000000000000000000000000a0' + // offset 160 to i = 1
      '0000000000000000000000000000000000000000000000000000000000000002' + // len(array[0]) = 2
      '0100000000000000000000000000000000000000000000000000000000000000' + // array[0][0]
      '0200000000000000000000000000000000000000000000000000000000000000' + // array[0][1]
      '0000000000000000000000000000000000000000000000000000000000000003' + // len(array[1]) = 3
      '0300000000000000000000000000000000000000000000000000000000000000' + // array[1][0]
      '0400000000000000000000000000000000000000000000000000000000000000' + // array[1][1]
      '0500000000000000000000000000000000000000000000000000000000000000' // array[1][2]
  },
  {
    def: [{ type: 'bytes32[3][2]' }],
    unpacked: [
      [
        [
          hexToBytes('0100000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0200000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0300000000000000000000000000000000000000000000000000000000000000')
        ],
        [
          hexToBytes('0300000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0400000000000000000000000000000000000000000000000000000000000000'),
          hexToBytes('0500000000000000000000000000000000000000000000000000000000000000')
        ]
      ]
    ],
    packed:
      '0100000000000000000000000000000000000000000000000000000000000000' + // array[0][0]
      '0200000000000000000000000000000000000000000000000000000000000000' + // array[0][1]
      '0300000000000000000000000000000000000000000000000000000000000000' + // array[0][2]
      '0300000000000000000000000000000000000000000000000000000000000000' + // array[1][0]
      '0400000000000000000000000000000000000000000000000000000000000000' + // array[1][1]
      '0500000000000000000000000000000000000000000000000000000000000000' // array[1][2]
  },
  // // tuples
  {
    // static tuple
    def: [
      {
        components: [
          { name: 'a', type: 'int64' },
          { name: 'b', type: 'int256' },
          { name: 'c', type: 'int256' },
          { name: 'd', type: 'bool' },
          { name: 'e', type: 'bytes32[3][2]' }
        ],
        type: 'tuple'
      }
    ],
    unpacked: [
      {
        a: new bn(1),
        b: new bn(1),
        c: new bn(-1),
        d: true,
        e: [
          [
            hexToBytes('0100000000000000000000000000000000000000000000000000000000000000'),
            hexToBytes('0200000000000000000000000000000000000000000000000000000000000000'),
            hexToBytes('0300000000000000000000000000000000000000000000000000000000000000')
          ],
          [
            hexToBytes('0300000000000000000000000000000000000000000000000000000000000000'),
            hexToBytes('0400000000000000000000000000000000000000000000000000000000000000'),
            hexToBytes('0500000000000000000000000000000000000000000000000000000000000000')
          ]
        ]
      }
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000001' + // struct[a]
      '0000000000000000000000000000000000000000000000000000000000000001' + // struct[b]
      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' + // struct[c]
      '0000000000000000000000000000000000000000000000000000000000000001' + // struct[d]
      '0100000000000000000000000000000000000000000000000000000000000000' + // struct[e] array[0][0]
      '0200000000000000000000000000000000000000000000000000000000000000' + // struct[e] array[0][1]
      '0300000000000000000000000000000000000000000000000000000000000000' + // struct[e] array[0][2]
      '0300000000000000000000000000000000000000000000000000000000000000' + // struct[e] array[1][0]
      '0400000000000000000000000000000000000000000000000000000000000000' + // struct[e] array[1][1]
      '0500000000000000000000000000000000000000000000000000000000000000' // struct[e] array[1][2]
  },
  {
    def: [
      {
        components: [
          { name: 'a', type: 'string' },
          { name: 'b', type: 'int64' },
          { name: 'c', type: 'bytes' },
          { name: 'd', type: 'string[]' },
          { name: 'e', type: 'int256[]' },
          { name: 'f', type: 'address[]' }
        ],
        type: 'tuple'
      }
    ],
    unpacked: [
      {
        a: 'foobar',
        b: new bn(1),
        c: new Uint8Array([1]),
        d: ['foo', 'bar'],
        e: [new bn(1), new bn(-1)],
        f: ['0x407D73d8a49eeb85D32Cf465507dd71d507100c1', '0x407d73d8a49EEB85d32Cf465507dD71D507100c2']
      }
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' + // struct a
      '00000000000000000000000000000000000000000000000000000000000000c0' + // struct[a] offset
      '0000000000000000000000000000000000000000000000000000000000000001' + // struct[b]
      '0000000000000000000000000000000000000000000000000000000000000100' + // struct[c] offset
      '0000000000000000000000000000000000000000000000000000000000000140' + // struct[d] offset
      '0000000000000000000000000000000000000000000000000000000000000220' + // struct[e] offset
      '0000000000000000000000000000000000000000000000000000000000000280' + // struct[f] offset
      '0000000000000000000000000000000000000000000000000000000000000006' + // struct[a] length
      '666f6f6261720000000000000000000000000000000000000000000000000000' + // struct[a] "foobar"
      '0000000000000000000000000000000000000000000000000000000000000001' + // struct[c] length
      '0100000000000000000000000000000000000000000000000000000000000000' + // []byte{1}
      '0000000000000000000000000000000000000000000000000000000000000002' + // struct[d] length
      '0000000000000000000000000000000000000000000000000000000000000040' + // foo offset
      '0000000000000000000000000000000000000000000000000000000000000080' + // bar offset
      '0000000000000000000000000000000000000000000000000000000000000003' + // foo length
      '666f6f0000000000000000000000000000000000000000000000000000000000' + // foo
      '0000000000000000000000000000000000000000000000000000000000000003' + // bar offset
      '6261720000000000000000000000000000000000000000000000000000000000' + // bar
      '0000000000000000000000000000000000000000000000000000000000000002' + // struct[e] length
      '0000000000000000000000000000000000000000000000000000000000000001' + // 1
      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' + // -1
      '0000000000000000000000000000000000000000000000000000000000000002' + // struct[f] length
      '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1' + // common.Address{1}
      '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c2' // common.Address{2}
  },
  {
    def: [
      {
        components: [
          {
            type: 'tuple',
            components: [
              { name: 'c', type: 'uint256' },
              { name: 'd', type: 'uint256[]' }
            ],
            name: 'a'
          },
          { name: 'b', type: 'uint256[]' }
        ],
        type: 'tuple'
      }
    ],
    unpacked: [
      {
        a: {
          c: new bn(1),
          d: [new bn(1), new bn(2)]
        },
        b: [new bn(1), new bn(2)]
      }
    ],
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' + // struct a
      '0000000000000000000000000000000000000000000000000000000000000040' + // a offset
      '00000000000000000000000000000000000000000000000000000000000000e0' + // b offset
      '0000000000000000000000000000000000000000000000000000000000000001' + // a.c value
      '0000000000000000000000000000000000000000000000000000000000000040' + // a.d offset
      '0000000000000000000000000000000000000000000000000000000000000002' + // a.d length
      '0000000000000000000000000000000000000000000000000000000000000001' + // a.d[0] value
      '0000000000000000000000000000000000000000000000000000000000000002' + // a.d[1] value
      '0000000000000000000000000000000000000000000000000000000000000002' + // b length
      '0000000000000000000000000000000000000000000000000000000000000001' + // b[0] value
      '0000000000000000000000000000000000000000000000000000000000000002' // b[1] value
  },

  {
    def: [
      {
        components: [
          { name: 'a', type: 'int256' },
          { name: 'b', type: 'int256[]' }
        ],
        name: 'envelope',
        type: 'tuple[]'
      }
    ],
    unpacked: {
      envelope: [
        { a: new bn(-1), b: [new bn(1), new bn(3)] },
        { a: new bn(1), b: [new bn(2), new bn(-1)] }
      ]
    },
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000002' + // tuple length
      '0000000000000000000000000000000000000000000000000000000000000040' + // tuple[0] offset
      '00000000000000000000000000000000000000000000000000000000000000e0' + // tuple[1] offset
      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' + // tuple[0].A
      '0000000000000000000000000000000000000000000000000000000000000040' + // tuple[0].B offset
      '0000000000000000000000000000000000000000000000000000000000000002' + // tuple[0].B length
      '0000000000000000000000000000000000000000000000000000000000000001' + // tuple[0].B[0] value
      '0000000000000000000000000000000000000000000000000000000000000003' + // tuple[0].B[1] value
      '0000000000000000000000000000000000000000000000000000000000000001' + // tuple[1].A
      '0000000000000000000000000000000000000000000000000000000000000040' + // tuple[1].B offset
      '0000000000000000000000000000000000000000000000000000000000000002' + // tuple[1].B length
      '0000000000000000000000000000000000000000000000000000000000000002' + // tuple[1].B[0] value
      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' // tuple[1].B[1] value
  },
  {
    def: [
      {
        components: [
          { name: 'a', type: 'int256' },
          { name: 'b', type: 'int256' }
        ],
        name: 'a',
        type: 'tuple[2]'
      }
    ],
    unpacked: {
      a: [
        {
          a: new bn(-1),
          b: new bn(1)
        },
        {
          a: new bn(1),
          b: new bn(-1)
        }
      ]
    },
    packed:
      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' + // tuple[0].a
      '0000000000000000000000000000000000000000000000000000000000000001' + // tuple[0].b
      '0000000000000000000000000000000000000000000000000000000000000001' + // tuple[1].a
      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' // tuple[1].b
  },
  {
    def: [
      {
        name: 'envelope',
        components: [{ name: 'a', type: 'int256[]' }],
        type: 'tuple[2]'
      }
    ],
    unpacked: { envelope: [{ a: [new bn(-1), new bn(1)] }, { a: [new bn(1), new bn(-1)] }] },
    packed:
      '0000000000000000000000000000000000000000000000000000000000000020' +
      '0000000000000000000000000000000000000000000000000000000000000040' + // tuple[0] offset
      '00000000000000000000000000000000000000000000000000000000000000c0' + // tuple[1] offset
      '0000000000000000000000000000000000000000000000000000000000000020' + // tuple[0].A offset
      '0000000000000000000000000000000000000000000000000000000000000002' + // tuple[0].A length
      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' + // tuple[0].A[0]
      '0000000000000000000000000000000000000000000000000000000000000001' + // tuple[0].A[1]
      '0000000000000000000000000000000000000000000000000000000000000020' + // tuple[1].A offset
      '0000000000000000000000000000000000000000000000000000000000000002' + // tuple[1].A length
      '0000000000000000000000000000000000000000000000000000000000000001' + // tuple[1].A[0]
      'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' // tuple[1].A[1]
  }
]

function coerceTuple(value: any) {
  if (
    value instanceof Uint8Array ||
    typeof value == 'string' ||
    typeof value == 'boolean' ||
    typeof value == 'number' ||
    isBigNumber(value)
  ) {
    return value
  }
  if (Array.isArray(value)) {
    return value.map(coerceTuple)
  }
  if (typeof value == 'object' && value && value.__proto__ == ({} as any).__proto__) {
    const ret = new Tuple()
    Object.entries(value).forEach(([key, v], index) => {
      ret[key] = coerceTuple(v) // this vlaue NEEDS to be duplicated in order to make the comparator work
      ret[index] = coerceTuple(v) // this vlaue NEEDS to be duplicated in order to make the comparator work
    })
    return ret
  }

  return value
}

function coerce(t: any) {
  if (isArray(t)) {
    return t.map(coerceTuple)
  } else {
    return coerceTuple(t)
  }
}

function coerceTupleNoName(value: any) {
  if (
    value instanceof Uint8Array ||
    typeof value == 'string' ||
    typeof value == 'boolean' ||
    typeof value == 'number' ||
    isBigNumber(value)
  ) {
    return value
  }
  if (Array.isArray(value)) {
    return value.map(coerceTupleNoName)
  }
  if (typeof value == 'object' && value && value.__proto__ == ({} as any).__proto__) {
    const ret = new Tuple()
    Object.entries(value).forEach(([_, v], index) => {
      ret[index] = coerceTupleNoName(v) // this vlaue NEEDS to be duplicated in order to make the comparator work
    })
    return ret
  }

  return value
}

function coerceNoName(t: any) {
  if (isArray(t)) {
    return t.map(coerceTupleNoName)
  } else {
    return coerceTupleNoName(t)
  }
}

describe('geth/packing', function () {
  packUnpackTests.forEach((test) => {
    describe(JSON.stringify(test.def), () => {
      it('pack: should turn ' + JSON.stringify(test.unpacked) + ' to ' + test.packed, function () {
        expect(coder.encodeParams(test.def as AbiInput[], coerce(test.unpacked))).toEqual(test.packed)
      })
      it('unpack: should turn ' + test.packed + ' to ' + JSON.stringify(test.unpacked), function () {
        expect(coder.decodeParams(test.def as AbiInput[], test.packed)).toEqual(coerce(test.unpacked))
      })
      const fmt = test.def.map(formatParamType)
      describe('toStr: ' + fmt, () => {
        it('pack: should turn ' + JSON.stringify(test.unpacked) + ' to ' + test.packed, function () {
          expect(coder.encodeParams(fmt, coerceNoName(test.unpacked))).toEqual(test.packed)
        })
        const unpacked = coerceNoName(test.unpacked)
        it('unpack: should turn ' + test.packed + ' to ' + JSON.stringify(unpacked), function () {
          expect(coder.decodeParams(fmt, test.packed)).toEqual(unpacked)
        })
        it('integration: unpacked (str) > packed (str) > unpacked (obj)', function () {
          expect(
            coder.decodeParams(test.def as AbiInput[], coder.encodeParams(fmt, coerceNoName(test.unpacked)))
          ).toEqual(coerce(test.unpacked))
        })
      })
    })
  })
})
