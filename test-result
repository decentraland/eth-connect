creating test environment...


  geth/packing
    ✓ pack: should turn true to 0000000000000000000000000000000000000000000000000000000000000001
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000001 to true
    ✓ pack: should turn false to 0000000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000000 to false
    ✓ pack: should turn 2 to 0000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000002 to 2
    ✓ pack: should turn "10" to 000000000000000000000000000000000000000000000000000000000000000a
    ✓ unpack: should turn 000000000000000000000000000000000000000000000000000000000000000a to "10"
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
    ✓ pack: should turn 5 to 0000000000000000000000000000000000000000000000000000000000000005
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000005 to 5
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
    ✓ pack: should turn 1 to 0000000000000000000000000000000000000000000000000000000000000001
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000001 to 1
    ✓ pack: should turn 1 to 0000000000000000000000000000000000000000000000000000000000000001
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000001 to 1
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
    ✓ pack: should turn "6" to 0000000000000000000000000000000000000000000000000000000000000006
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000006 to "6"
    ✓ pack: should turn ["1","2"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
    ✓ pack: should turn "11" to 000000000000000000000000000000000000000000000000000000000000000b
    ✓ unpack: should turn 000000000000000000000000000000000000000000000000000000000000000b to "11"
    ✓ pack: should turn ["1","2"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn 2 to 0000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000002 to 2
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn 2 to 0000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000002 to 2
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn 2 to 0000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000002 to 2
{ fromTwosComplement: true, ret: '1', num: '1' }
    ✓ pack: should turn 1 to 0000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '1', num: '1' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000001 to 1
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn "2" to 0000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000002 to "2"
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn ["1","2"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn "2" to 0000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000002 to "2"
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    ✓ pack: should turn "-1" to ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    1) unpack: should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to "-1"
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn ["1","2"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
    ✓ pack: should turn "0x0100000000000000000000000000000000000000" to 0000000000000000000000000100000000000000000000000000000000000000
    ✓ unpack: should turn 0000000000000000000000000100000000000000000000000000000000000000 to "0x0100000000000000000000000000000000000000"
    ✓ pack: should turn ["0x0100000000000000000000000000000000000000","0x0200000000000000000000000000000000000000"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000 to ["0x0100000000000000000000000000000000000000","0x0200000000000000000000000000000000000000"]
    ✓ pack: should turn {"0":1} to 0100000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0100000000000000000000000000000000000000000000000000000000000000 to {"0":1}
    ✓ pack: should turn {"0":1,"1":0} to 0100000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0100000000000000000000000000000000000000000000000000000000000000 to {"0":1,"1":0}
    ✓ pack: should turn {"0":1,"1":0,"2":0} to 0100000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0100000000000000000000000000000000000000000000000000000000000000 to {"0":1,"1":0,"2":0}
    ✓ pack: should turn {"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0} to 0100000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0100000000000000000000000000000000000000000000000000000000000000 to {"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}
    ✓ pack: should turn {"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0} to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200100000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200100000000000000000000000000000000000000000000000000000000000000 to {"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}
    2) pack: should turn {"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0} to 0100000000000000000000000000000000000000000000000000000000000000
    3) unpack: should turn 0100000000000000000000000000000000000000000000000000000000000000 to {"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0}
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
    ✓ pack: should turn [] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000 to []
    ✓ pack: should turn [] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000 to []
    ✓ pack: should turn [1,2] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn [1,2] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn [1,2] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn [1,2] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn ["1","2"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn ["1","2"] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn ["1","2"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
    ✓ pack: should turn ["1","2","3"] to 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
    ✓ unpack: should turn 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003 to ["1","2","3"]
    ✓ pack: should turn [] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000 to []
    ✓ pack: should turn [[1,2],[1,2]] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [[1,2],[1,2]]
    ✓ pack: should turn [[1,2],[1,2,3]] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003 to [[1,2],[1,2,3]]
    ✓ pack: should turn [[],[]] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 to [[],[]]
    ✓ pack: should turn [[1,2],[1,2]] to 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [[1,2],[1,2]]
    ✓ pack: should turn [[1],[1]] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001 to [[1],[1]]
    ✓ pack: should turn [] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000 to []
    ✓ pack: should turn [[1,2]] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [[1,2]]
    ✓ pack: should turn [[1,2],[1,2]] to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [[1,2],[1,2]]
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
    ✓ pack: should turn [1,2] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
    ✓ pack: should turn [1,2] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
    ✓ pack: should turn [[[1,2],[3,4],[5,6]],[[7,8],[9,10],[11,12]],[[13,14],[15,16],[17,18]],[[19,20],[21,22],[23,24]]] toa000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f
    ✓ unpack: should turna000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000fto [[[1,2],[3,4],[5,6]],[[7,8],[9,10],[11,12]],[[13,14],[15,16],[17,18]],[[19,20],[21,22],[23,24]]]
    ✓ pack: should turn [{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":2,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000201000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000201000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000 to [{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":2,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}]
    ✓ pack: should turn [1,2] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to [1,2]
    ✓ pack: should turn ["1","2"] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
    ✓ pack: should turn ["1","2"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
    ✓ pack: should turn ["1","2"] to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
    ✓ pack: should turn ["1","2"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to ["1","2"]
    ✓ pack: should turn ["1","2","3"] to 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003
    ✓ unpack: should turn 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003 to ["1","2","3"]
    ✓ pack: should turn ["Hello","World","Go-ethereum","Ethereum"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000548656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005576f726c64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b476f2d657468657265756d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008457468657265756d000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000548656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005576f726c64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b476f2d657468657265756d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008457468657265756d000000000000000000000000000000000000000000000000 to ["Hello","World","Go-ethereum","Ethereum"]
    ✓ pack: should turn ["Ethereum","go-ethereum"] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000008457468657265756d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b676f2d657468657265756d000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000008457468657265756d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b676f2d657468657265756d000000000000000000000000000000000000000000 to ["Ethereum","go-ethereum"]
    ✓ pack: should turn [{"0":240,"1":240,"2":240},{"0":240,"1":240,"2":240}] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003f0f0f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f0f0f00000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003f0f0f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f0f0f00000000000000000000000000000000000000000000000000000000000 to [{"0":240,"1":240,"2":240},{"0":240,"1":240,"2":240}]
    ✓ pack: should turn [[["1","200"],["1","1000"]],[["1","200"],["1","1000"]]] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8 to [[["1","200"],["1","1000"]],[["1","200"],["1","1000"]]]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn {"int1":"1","int2":"2"} to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to {"int1":"1","int2":"2"}
{ fromTwosComplement: true, ret: '1', num: '1' }
    ✓ pack: should turn {"int_one":"1"} to 0000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '1', num: '1' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000001 to {"int_one":"1"}
{ fromTwosComplement: true, ret: '1', num: '1' }
    ✓ pack: should turn {"int__one":"1"} to 0000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '1', num: '1' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000001 to {"int__one":"1"}
{ fromTwosComplement: true, ret: '1', num: '1' }
    ✓ pack: should turn {"int_one_":"1"} to 0000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '1', num: '1' }
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000001 to {"int_one_":"1"}
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ pack: should turn {"int_one":"1","intone":"2"} to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002 to {"int_one":"1","intone":"2"}
    ✓ pack: should turn "foobar" to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000 to "foobar"
    ✓ pack: should turn ["hello","foobar"] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000 to ["hello","foobar"]
    ✓ pack: should turn ["hello","foobar"] to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000 to ["hello","foobar"]
    ✓ pack: should turn [[{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":2,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}],[{"0":3,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":4,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":5,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}]] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000 to [[{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":2,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}],[{"0":3,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":4,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":5,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}]]
    ✓ pack: should turn [[{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":2,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}],[{"0":3,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":4,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":5,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}]] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000
    ✓ unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000 to [[{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":2,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}],[{"0":3,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":4,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},{"0":5,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0}]]
    ✓ pack: should turn [[{"0":1},{"0":2},{"0":3}],[{"0":3},{"0":4},{"0":5}]] to 010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000
    4) unpack: should turn 010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000 to [[{"0":1},{"0":2},{"0":3}],[{"0":3},{"0":4},{"0":5}]]
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    ✓ pack: should turn {"a":"1","b":"1","c":"-1","d":true,"e":[[{"0":1},{"0":2},{"0":3}],[{"0":3},{"0":4},{"0":5}]]} to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    5) unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000 to {"a":"1","b":"1","c":"-1","d":true,"e":[[{"0":1},{"0":2},{"0":3}],[{"0":3},{"0":4},{"0":5}]]}
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    ✓ pack: should turn {"a":"foobar","b":"1","c":{"0":1},"d":["foo","bar"],"e":["1","-1"],"f":["0x407d73d8a49eeb85d32cf465507dd71d507100c1","0x407d73d8a49eeb85d32cf465507dd71d507100c2"]} to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003666f6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003626172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c2
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    6) unpack: should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003666f6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003626172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c2 to {"a":"foobar","b":"1","c":{"0":1},"d":["foo","bar"],"e":["1","-1"],"f":["0x407d73d8a49eeb85d32cf465507dd71d507100c1","0x407d73d8a49eeb85d32cf465507dd71d507100c2"]}
    ✓ pack: should turn {"a":{"a":"1","b":["1","2"]},"b":["1","2"]} to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e
    7) unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000eto {"a":{"a":"1","b":["1","2"]},"b":["1","2"]}
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    ✓ pack: should turn [{"a":"-1","b":["1","3"]},{"a":"1","b":["2","-1"]}] to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    8) unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to [{"a":"-1","b":["1","3"]},{"a":"1","b":["2","-1"]}]
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    ✓ pack: should turn [{"a":"-1","b":"1"},{"a":"1","b":"-1"}] to ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    9) unpack: should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to [{"a":"-1","b":"1"},{"a":"1","b":"-1"}]
    10) pack: should turn [[{"a":"-1","b":"1"}],[{"a":"1","b":"-1"}]] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
    11) unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to [[{"a":"-1","b":"1"}],[{"a":"1","b":"-1"}]]

  lib/web3/allevents
    decode
      ✓ test no: 0
      ✓ test no: 1
{ fromTwosComplement: true, ret: '16', num: '10' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '4', num: '4' }
      ✓ test no: 2

  async
    ✓ test: 0
    ✓ error test: 0

  lib/solidity/coder
    decodeParam
      ✓ should turn 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1 to address=0x407d73d8a49eeb85d32cf465507dd71d507100c1
      ✓ should turn 000000000000000000000000bf79ce2fbd819e5abc2327563d02a200255b7cb3 to address=0xbf79ce2fbd819e5abc2327563d02a200255b7cb3
      ✓ should turn 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3 to address[2]=0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c3
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3 to address[]=0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c3
      12) should turn 000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4 to address[][2]=0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c2,0x407d73d8a49eeb85d32cf465507dd71d507100c3,0x407d73d8a49eeb85d32cf465507dd71d507100c4
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c2000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4 to address[2][]=0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c2,0x407d73d8a49eeb85d32cf465507dd71d507100c3,0x407d73d8a49eeb85d32cf465507dd71d507100c4
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4 to address[][]=0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c2,0x407d73d8a49eeb85d32cf465507dd71d507100c3,0x407d73d8a49eeb85d32cf465507dd71d507100c4
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to bool=true
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000000 to bool=false
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000 to bool[2]=true,false
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000 to bool[]=true,true,false
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to int=1
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to int=1
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000010 to int=16
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
      13) should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to int=-1
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to int256=1
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000010 to int256=16
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
      14) should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to int256=-1
{ fromTwosComplement: true, ret: '16', num: '10' }
      15) should turn 0000000000000000000000000000000000000000000000000000000000000010 to int8=16
{ fromTwosComplement: true, ret: '16', num: '10' }
{ fromTwosComplement: true, ret: '2', num: '2' }
      16) should turn 00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002 to int8[2]=16,2
{ fromTwosComplement: true, ret: '16', num: '10' }
      17) should turn 0000000000000000000000000000000000000000000000000000000000000010 to int32=16
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000010 to int64=16
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000010 to int128=16
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000 to int[]=
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003 to int[]=3
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003 to int256[]=3
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003 to int[]=1,2,3
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '4', num: '4' }
{ fromTwosComplement: true, ret: '5', num: '5' }
{ fromTwosComplement: true, ret: '6', num: '6' }
      ✓ should turnto int[3][]=1,2,3,4,5,6
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to uint=1
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to uint=1
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000010 to uint=16
      ✓ should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to uint=1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to uint256=1
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000010 to uint256=16
      18) should turn 0000000000000000000000000000000000000000000000000000000000000010 to uint8=16
      19) should turn 0000000000000000000000000000000000000000000000000000000000000010 to uint32=16
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000010 to uint64=16
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000010 to uint128=16
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000 to uint[]=
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003 to uint[]=3
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003 to uint256[]=3
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003 to uint[]=1,2,3
      ✓ should turnto uint[3][]=1,2,3,4,5,6
      20) should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000 to bytes=0x6761766f66796f726b
      21) should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to bytes=0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      22) should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to bytes=0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      23) should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to bytes=0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      24) should turn 000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a0000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to bytes[2]=0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a,0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      25) should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002200000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff0000 to bytes[2]=0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff,0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff
      26) should turn 00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a0000000000000000000000000000000000000000000000000000000000000040731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c0000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134d to bytes[][2]=0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a,0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c,0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134d
      27) should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002200000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002200000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff0000 to bytes[][2]=0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff,0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff,0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff,0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff
      28) should turn cf00000000000000000000000000000000000000000000000000000000000000 to bytes1=0xcf
      29) should turn cf0000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000004d00000000000000000000000000000000000000000000000000000000000000fb00000000000000000000000000000000000000000000000000000000000000 to bytes1[4]=0xcf,0x68,0x4d,0xfb
      30) should turn 6761766f66796f726b0000000000000000000000000000000000000000000000 to bytes32=0x6761766f66796f726b0000000000000000000000000000000000000000000000
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000 to string=gavofyork
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008c383c2a4c383c2a4000000000000000000000000000000000000000000000000 to string=Ã¤Ã¤
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002c3bc000000000000000000000000000000000000000000000000000000000000 to string=ü
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002c383000000000000000000000000000000000000000000000000000000000000 to string=Ã
      31) should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006c3a40000c3a40000000000000000000000000000000000000000000000000000 to bytes=0xc3a40000c3a4
      32) should turn c3a40000c3a40000000000000000000000000000000000000000000000000000 to bytes32=0xc3a40000c3a40000000000000000000000000000000000000000000000000000
      33) should turn 0000000000000000000000000000000100000000000000000000000000000000 to real=1
      34) should turn 0000000000000000000000000000000220000000000000000000000000000000 to real=2.125
      35) should turn 0000000000000000000000000000000880000000000000000000000000000000 to real=8.5
      36) should turn ffffffffffffffffffffffffffffffff00000000000000000000000000000000 to real=-1
      37) should turn 0000000000000000000000000000000100000000000000000000000000000000 to ureal=1
      38) should turn 0000000000000000000000000000000220000000000000000000000000000000 to ureal=2.125
      39) should turn 0000000000000000000000000000000880000000000000000000000000000000 to ureal=8.5
      ✓ should turn 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1 to address=0x407d73d8a49eeb85d32cf465507dd71d507100c1
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003e77656c636f6d6520746f20657468657265756d2e2077656c636f6d6520746f20657468657265756d2e2077656c636f6d6520746f20657468657265756d2e0000 to string=welcome to ethereum. welcome to ethereum. welcome to ethereum.
      40) should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff100 to bytes=0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1
      41) should turn 000000000000000000000000bbf289d846208c16edc8474705c748aff07732db to tuple(address)=0xbBF289D846208c16EDc8474705C748aff07732dB
      42) should turn 000000000000000000000000bbf289d846208c16edc8474705c748aff07732db000000000000000000000000bbf289d846208c16edc8474705c748aff07732db to tuple(address,address)=0xbBF289D846208c16EDc8474705C748aff07732dB,0xbBF289D846208c16EDc8474705C748aff07732dB
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005 to tuple(uint256,uint256)=5,5
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005776f726c64000000000000000000000000000000000000000000000000000000 to tuple(string,string)=hello,world
      43) should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000701fe517acd15ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007abcdef1234567800000000000000000000000000000000000000000000000000 to tuple(bytes,bytes)=0x01fe517acd15ff,0xabcdef12345678
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to tuple(bool,bool)=false,true
      44) should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000977686174207768617400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007abcdef1234567800000000000000000000000000000000000000000000000000 to tuple(uint256,string,bytes)=4,what what,0xabcdef12345678
      45) should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000029a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000010656e636f646520796f7572206b696473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010656e636f646520796f7572207769666500000000000000000000000000000000 to tuple(uint128,string,bytes)=666,encode your kids,0x656e636f646520796f75722077696665
      46) should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080aabbccddeeff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007666f6f2062617200000000000000000000000000000000000000000000000000 to tuple(string,bytes32,uint256,bool)=foo bar,0xaabbccddeeff0000000000000000000000000000000000000000000000000000,321,true
      47) should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000046669766500000000000000000000000000000000000000000000000000000000 to tuple(uint8,uint8,uint8,uint8,string,address,bool)=1,2,3,4,five,0x0000000000000000000000000000000000000006,true
      ✓ should turn 0000000000000000000000001234567890123456789012345678901234567890000000000000000000000000123456789012345678901234567890123456789000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006 to tuple(tuple(address,address),tuple(uint256,uint256))=0x1234567890123456789012345678901234567890,0x1234567890123456789012345678901234567890,5,6
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000123456789012345678901234567890123456789000000000000000000000000012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000086120737472696e67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e616e6f7468657220737472696e67000000000000000000000000000000000000 to tuple(tuple(address,address),tuple(uint256,uint256),tuple(string,string))=0x1234567890123456789012345678901234567890,0x1234567890123456789012345678901234567890,5,6,a string,another string

  lib/solidity/coder
    decodeParams
      ✓ should turn 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1 to 0x407d73d8a49eeb85d32cf465507dd71d507100c1
      ✓ should turn 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3 to 0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c3
      48) should turn 0000000000000000000000006224fe0bea79701d338cf65ebc0da0caa566c544000000000000000000000000BF79cE2fbd819e5aBC2327563D02a200255B7Cb3 to 0x6224fe0bea79701d338cf65ebc0da0caa566c544,0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to true,false,false,false,true
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '4', num: '4' }
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005 to 1,2,3,4,5
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to 1
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005 to 1,2,3,4,5
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001 to 1
      49) should turn aa00000000000000000000000000000000000000000000000000000000000000bb00000000000000000000000000000000000000000000000000000000000000 to 0xaa,0xbb
      50) should turn aa00000000000000000000000000000000000000000000000000000000000000bb00000000000000000000000000000000000000000000000000000000000000cc00000000000000000000000000000000000000000000000000000000000000 to 0xaa,0xbb,0xcc
      51) should turn 000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b0000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c to 0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b,0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000 to 1,gavofyork,5
{ fromTwosComplement: true, ret: '5', num: '5' }
      52) should turn 6761766f66796f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 to 0x6761766f66796f726b0000000000000000000000000000000000000000000000,5
{ fromTwosComplement: true, ret: '5', num: '5' }
      53) should turn 00000000000000000000000000000000000000000000000000000000000000056761766f66796f726b0000000000000000000000000000000000000000000000 to 5,0x6761766f66796f726b0000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '4', num: '4' }
{ fromTwosComplement: true, ret: '5', num: '5' }
{ fromTwosComplement: true, ret: '6', num: '6' }
{ fromTwosComplement: true, ret: '7', num: '7' }
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007 to 1,gavofyork,2,3,4,5,6,7
{ fromTwosComplement: true, ret: '5', num: '5' }
{ fromTwosComplement: true, ret: '3', num: '3' }
      54) should turn 00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000040131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b0000000000000000000000000000000000000000000000000000000000000040331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b431a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to 5,0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b,3,0x331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b431a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      ✓ should turn 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c30000000000000000000000000000000000000000000000000000000000000000 to 0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c3,false
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to true,false,true
      55) should turn aa00000000000000000000000000000000000000000000000000000000000000bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to 0xaa,0xbb,true
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001 to 1,2,true
      56) should turn 000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to 1,2.125,true
      ✓ should turn 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001 to 1,2,true
      57) should turn 000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to 1,2.125,true
      ✓ should turn 000000000000000000000000123456789012345678901234567890123456789000000000000000000000000012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000568656c6c6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005776f726c64000000000000000000000000000000000000000000000000000000 to 0x1234567890123456789012345678901234567890,0x1234567890123456789012345678901234567890,hello,world,false
      58) should turn 000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000a74686520737472696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b736f6d6520737472696e670000000000000000000000000000000000000000001234567890123456789012345678901234567890123456789012345678901234000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000031295810000000000000000000000000000000000000000000000000000000000 to the string,56,some string,true,0x1234567890123456789012345678901234567890123456789012345678901234,0x129581
      ✓ should turn 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000043000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000005390000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000568656c6c6f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a6c61737420706172616d00000000000000000000000000000000000000000000 to true,false,true,false,true,256,76,67,1337,hello,last param
      59) should turn 000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000047768617400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000269730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000046576656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000968617070656e696e6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002696eb676f64666f7273616b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047465737400000000000000000000000000000000000000000000000000000000 to hello world,what,is,even,happening,0x696e,0x74686973,0x676f64666f7273616b656e,test
      60) should turn 00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000000474686973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000026973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000076d61646e65737300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d6275742049206c6f76652069740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000106265636175736520697420776f726b7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000112345678901234567890123456789012345678901234567890123456789012340000000000000000000000001337133713371337133713371337133713371337000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000206265636175736520697420776f726b736265636175736520697420776f726b73 to this,true,is,true,utter,true,madness,0x1234567890123456789012345678901234567890123456789012345678901234,0x6275742049206c6f7665206974,0x6265636175736520697420776f726b73,true,0x1234567890123456789012345678901234567890123456789012345678901234,0x1337133713371337133713371337133713371337,0x6265636175736520697420776f726b736265636175736520697420776f726b73
{
  fromTwosComplement: true,
  ret: '1.1579208923731619542357098500868790785326998466564056403945758400791312963993e+77',
  num: 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa'
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639929e+77',
  num: 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9'
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639928e+77',
  num: 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8'
}
      61) should turn 00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000001b3f5fe0fd513e6cbdee459f0b0e19095fe91958000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001774686973206973206d6f726520726561736f6e61626c6500000000000000000000000000000000000000000000000000000000000000000000000000000000096c6f6c6f6c6f6c6f6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d13b6e9058e58b8677233cec2315e1d9e77c79c40000000000000000000000000000000000000000000000000000000000000007abcdef1234567800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000787654321fedcba00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000662617a6261720000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000060fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000b1eef147028e9f480dbc5ccaa3277d417d1b85f00000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000 to this is more reasonable,true,false,0x1b3F5FE0Fd513E6cbdEE459F0b0e19095FE91958,0x6c6f6c6f6c6f6c6f6c,0xabcdef12345678,0x87654321fedcba,bazbar,false,0xd13b6e9058E58B8677233CEc2315e1D9e77C79C4,-6,-7,5,foobar,-8,0xB1eeF147028E9f480DbC5ccaA3277D417D1b85F0
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913123515324e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa28bbc'
}
      62) should turn ffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae0000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae00000000000000000000000012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000160000000000000000000000000123456789012345678901234567890123456789000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001234567890123456789012345678901234567890ffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbaeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa28bbc0000000000000000000000000000000000000000000000000000000000015ba80ab3e6dfa1594c15af0000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000006737472696e670000000000000000000000000000000000000000000000000000 to 0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae,true,0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae,0x1234567890123456789012345678901234567890,0x0ab3e6dfa1594c15af0000000000000000000000000000000000000000000000,0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae,string,0x1234567890123456789012345678901234567890,true,0x1234567890123456789012345678901234567890,0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae,-6124612,89000

  lib/solidity/coder
    encodeParam
      ✓ should turn address 0x407d73d8a49eeb85d32cf465507dd71d507100c1 to 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1
      ✓ should turn address 0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3 to 000000000000000000000000bf79ce2fbd819e5abc2327563d02a200255b7cb3
      ✓ should turn address[2] 0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3,0x407d73d8a49eeb85d32cf465507dd71d507100c3 to 000000000000000000000000bf79ce2fbd819e5abc2327563d02a200255b7cb3000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3
      ✓ should turn address[2] 0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c3 to 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3
      ✓ should turn address[] 0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c3 to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3
      ✓ should turn address[][2] 0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c2,0x407d73d8a49eeb85d32cf465507dd71d507100c3,0x407d73d8a49eeb85d32cf465507dd71d507100c4 to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4
      ✓ should turn address[2][] 0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c2,0x407d73d8a49eeb85d32cf465507dd71d507100c3,0x407d73d8a49eeb85d32cf465507dd71d507100c4 to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c2000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4
      ✓ should turn bool true to 0000000000000000000000000000000000000000000000000000000000000001
      ✓ should turn bool false to 0000000000000000000000000000000000000000000000000000000000000000
      ✓ should turn bool[1][2] false,false to 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
      ✓ should turn bool[2] true,false to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000
      ✓ should turn bool[] true,true,false to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ should turn int 1 to 0000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ should turn int 16 to 0000000000000000000000000000000000000000000000000000000000000010
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
      ✓ should turn int -1 to ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
{ fromTwosComplement: true, ret: '0', num: '0' }
      ✓ should turn int 0.1 to 0000000000000000000000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '4', num: '4' }
      63) should turn int 3.9 to 0000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ should turn int256 1 to 0000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ should turn int256 16 to 0000000000000000000000000000000000000000000000000000000000000010
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
      ✓ should turn int256 -1 to ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
      ✓ should turn uint 1 to 0000000000000000000000000000000000000000000000000000000000000001
      ✓ should turn uint 16 to 0000000000000000000000000000000000000000000000000000000000000010
      ✓ should turn uint 0.1 to 0000000000000000000000000000000000000000000000000000000000000000
      64) should turn uint 3.9 to 0000000000000000000000000000000000000000000000000000000000000003
      ✓ should turn uint256 1 to 0000000000000000000000000000000000000000000000000000000000000001
      ✓ should turn uint256 16 to 0000000000000000000000000000000000000000000000000000000000000010
      ✓ should turn uint256 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
      ✓ should turn bytes32 0x6761766f66796f726b to 6761766f66796f726b0000000000000000000000000000000000000000000000
      ✓ should turn bytes32 0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to 731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      ✓ should turn bytes32 0x02838654a83c213dae3698391eabbd54a5b6e1fb3452bc7fa4ea0dd5c8ce7e29 to 02838654a83c213dae3698391eabbd54a5b6e1fb3452bc7fa4ea0dd5c8ce7e29
      ✓ should turn bytes 0x6761766f66796f726b to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000
      ✓ should turn bytes 0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      ✓ should turn bytes 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1 to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff100
      ✓ should turn string gavofyork to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000
      ✓ should turn bytes 0xc3a40000c3a4 to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006c3a40000c3a40000000000000000000000000000000000000000000000000000
      ✓ should turn bytes32 0xc3a40000c3a4 to c3a40000c3a40000000000000000000000000000000000000000000000000000
      65) should turn bytes64 0xc3a40000c3a40000000000000000000000000000000000000000000000000000c3a40000c3a40000000000000000000000000000000000000000000000000000 to c3a40000c3a40000000000000000000000000000000000000000000000000000c3a40000c3a40000000000000000000000000000000000000000000000000000
      ✓ should turn string Ã¤Ã¤ to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008c383c2a4c383c2a4000000000000000000000000000000000000000000000000
      ✓ should turn string ü to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002c3bc000000000000000000000000000000000000000000000000000000000000
      ✓ should turn string Ã to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002c383000000000000000000000000000000000000000000000000000000000000
      ✓ should turn int[]  to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn int[] 3 to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn int256[] 3 to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn int[] 1,2,3 to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003
      ✓ should turn bytes1[4] 0xcf,0x68,0x4d,0xfb to cf0000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000004d00000000000000000000000000000000000000000000000000000000000000fb00000000000000000000000000000000000000000000000000000000000000
      66) should turn real 1 to 0000000000000000000000000000000100000000000000000000000000000000
      67) should turn real 2.125 to 0000000000000000000000000000000220000000000000000000000000000000
      68) should turn real 8.5 to 0000000000000000000000000000000880000000000000000000000000000000
      69) should turn real -1 to ffffffffffffffffffffffffffffffff00000000000000000000000000000000
      70) should turn ureal 1 to 0000000000000000000000000000000100000000000000000000000000000000
      71) should turn ureal 2.125 to 0000000000000000000000000000000220000000000000000000000000000000
      72) should turn ureal 8.5 to 0000000000000000000000000000000880000000000000000000000000000000
      ✓ should turn bytes 0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      ✓ should turn bytes 0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      ✓ should turn string welcome to ethereum. welcome to ethereum. welcome to ethereum. to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003e77656c636f6d6520746f20657468657265756d2e2077656c636f6d6520746f20657468657265756d2e2077656c636f6d6520746f20657468657265756d2e0000
      ✓ should turn tuple(string,string) welcome to ethereum.,welcome to ethereum. to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001477656c636f6d6520746f20657468657265756d2e000000000000000000000000000000000000000000000000000000000000000000000000000000000000001477656c636f6d6520746f20657468657265756d2e000000000000000000000000
      ✓ should turn tuple(bytes,bytes) 0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001477656c636f6d6520746f20657468657265756d2e000000000000000000000000000000000000000000000000000000000000000000000000000000000000001477656c636f6d6520746f20657468657265756d2e000000000000000000000000
      ✓ should turn tuple(bytes,bool,uint256) 0x77656c636f6d6520746f20657468657265756d2e,true,124515 to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000001e663000000000000000000000000000000000000000000000000000000000000001477656c636f6d6520746f20657468657265756d2e000000000000000000000000
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639785e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff69'
}
      ✓ should turn tuple(string,tuple(bool,int256),address) hello,true,-151,0x0175010374017501037401750103740175010374 to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff690000000000000000000000000175010374017501037401750103740175010374000000000000000000000000000000000000000000000000000000000000000568656c6c6f000000000000000000000000000000000000000000000000000000
      ✓ should turn tuple(tuple(bool,bool),tuple(address,address),tuple(string,string)) true,false,0x81017589ab81017589ab81017589ab81017589ab,0x81017589ab81017589ab81017589ab81017589ab,string One,string Two to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000081017589ab81017589ab81017589ab81017589ab00000000000000000000000081017589ab81017589ab81017589ab81017589ab00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a737472696e67204f6e6500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a737472696e672054776f00000000000000000000000000000000000000000000
      ✓ should turn tuple(tuple(tuple(bool,bool),tuple(bytes,bytes),tuple(address,bool)),address) false,false,0xab1394581edfa2ef9ca71,0x15abe391df19aef19a4561,0xec2270c849236333c86834728e783cd2f789088e,true,0x81017589ab81017589ab81017589ab81017589ab to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000081017589ab81017589ab81017589ab81017589ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ec2270c849236333c86834728e783cd2f789088e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b0ab1394581edfa2ef9ca71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b15abe391df19aef19a4561000000000000000000000000000000000000000000
      ✓ should turn tuple(bool,string,bool,tuple(address,address)) true,testing,false,0x1981710abe1981710abe1981710abe1981710abe,0x1981710abe1981710abe1981710abe1981710abe to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001981710abe1981710abe1981710abe1981710abe0000000000000000000000001981710abe1981710abe1981710abe1981710abe000000000000000000000000000000000000000000000000000000000000000774657374696e6700000000000000000000000000000000000000000000000000
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129637985e+77',
  num: 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861'
}
{ fromTwosComplement: true, ret: '194018', num: '2f5e2' }
      ✓ should turn tuple(address,address,tuple(string,tuple(int256,int256),string)) 0x1981710abe1981710abe1981710abe1981710abe,0x1981710abe1981710abe1981710abe1981710abe,structs are great,-1951,194018,so many possibilities to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000001981710abe1981710abe1981710abe1981710abe0000000000000000000000001981710abe1981710abe1981710abe1981710abe00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861000000000000000000000000000000000000000000000000000000000002f5e200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001173747275637473206172652067726561740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015736f206d616e7920706f73736962696c69746965730000000000000000000000
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913111348087e+77',
  num: 'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8e377'
}
      ✓ should turn tuple(bool,tuple(bytes32,int256,tuple(bytes24,bytes8)),tuple(bool,bool,bool),string) true,0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18,-18291849,0xabdef18710a18a18abdef18710a18a18abdef18710a18a18,0xabdef18710a18a18,false,true,false,testing testing to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18fffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8e377abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000abdef18710a18a180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000f74657374696e672074657374696e670000000000000000000000000000000000
      73) should turn tuple(bool,tuple(bytes32,int256,tuple(bytes24,bytes8)),tuple(bool,bool,bool),string) true,0xabdef,-18291849,0xabdef18710a18a18abdef18710a18a18abdef18710a18a18,0xabdef18710a18a18,false,true,false,testing testing to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001abdef00000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8e377abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000abdef18710a18a180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000f74657374696e672074657374696e670000000000000000000000000000000000

  lib/solidity/coder
    ✓ encodeParams
    encodeParams
      ✓ should turn 0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c3 to 000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3
      ✓ should turn true,false,false,false,true to 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ should turn 1 to 0000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ should turn 16 to 0000000000000000000000000000000000000000000000000000000000000010
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
      ✓ should turn -1 to ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ should turn 1 to 0000000000000000000000000000000000000000000000000000000000000001
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ should turn 16 to 0000000000000000000000000000000000000000000000000000000000000010
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'
}
      ✓ should turn -1 to ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn 3 to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn 3 to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn 1,2,3 to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '4', num: '4' }
      ✓ should turn 1,2,3,4 to 000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '4', num: '4' }
{ fromTwosComplement: true, ret: '5', num: '5' }
{ fromTwosComplement: true, ret: '6', num: '6' }
{ fromTwosComplement: true, ret: '7', num: '7' }
      ✓ should turn 1,2,3,4,5,6,7 to 000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c
      ✓ should turn 0x6761766f66796f726b to 6761766f66796f726b0000000000000000000000000000000000000000000000
      ✓ should turn gavofyork to 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000
      ✓ should turn gavofyork,gavofyork to 0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should turn 0x6761766f66796f726b,5 to 6761766f66796f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should turn 5,0x6761766f66796f726b to 00000000000000000000000000000000000000000000000000000000000000056761766f66796f726b0000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should turn 5,gavofyork to 0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should turn gavofyork,5 to 0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn gavofyork,true,1,2,3 to 0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn gavofyork,1,2,3 to 0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should turn 5,gavofyork to 0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '4', num: '4' }
{ fromTwosComplement: true, ret: '5', num: '5' }
{ fromTwosComplement: true, ret: '6', num: '6' }
{ fromTwosComplement: true, ret: '7', num: '7' }
      ✓ should turn 1,gavofyork,2,3,4,5,6,7 to 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007
{ fromTwosComplement: true, ret: '5', num: '5' }
{ fromTwosComplement: true, ret: '3', num: '3' }
      ✓ should turn 5,0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b,3,0x331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b431a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to 00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000040131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b0000000000000000000000000000000000000000000000000000000000000040331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b431a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b
      ✓ should turn 0xcf0011,0x4d00000000000000000000000000000000000000000000000000000000000012 to cf00110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000204d00000000000000000000000000000000000000000000000000000000000012
      ✓ should turn what,what what,what what to
      ✓ should turn 0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18,true,true,0x77656c636f6d6520746f20657468657265756d2e to abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000077656c636f6d6520746f20657468657265756d2e
      ✓ should turn 0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18,true,true,0x77656c636f6d6520746f20657468657265756d2e to abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000077656c636f6d6520746f20657468657265756d2e
      ✓ should turn 0x77656c636f6d6520746f20657468657265756d2e,148,5910,true,0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18,0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18 to 00000000000000000000000077656c636f6d6520746f20657468657265756d2e000000000000000000000000000000000000000000000000000000000000009400000000000000000000000000000000000000000000000000000000000017160000000000000000000000000000000000000000000000000000000000000001abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18
      ✓ should turn 0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e,true,false,false,true,0xab1394581edfa2ef9ca71,0x15abe391df19aef19a4561,182,1937,0x77656c636f6d6520746f20657468657265756d2e to 00000000000000000000000077656c636f6d6520746f20657468657265756d2e00000000000000000000000077656c636f6d6520746f20657468657265756d2e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000077656c636f6d6520746f20657468657265756d2e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b6000000000000000000000000000000000000000000000000000000000000079100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b0ab1394581edfa2ef9ca71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b15abe391df19aef19a4561000000000000000000000000000000000000000000
      ✓ should turn 18320,true,691,0xab1394581edfa2ef9ca71,0x15abe391df19aef19a4561,0xab1394581edfa2ef9ca71,false,0xfe,0x77656c636f6d6520746f20657468657265756d2e,0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18 to 000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000047900000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002b3000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b0ab1394581edfa2ef9ca71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b15abe391df19aef19a4561000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b0ab1394581edfa2ef9ca710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000077656c636f6d6520746f20657468657265756d2e0000000000000000000000000000000000000000000000000000000000000001fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020abdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129627485e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf5d'
}
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913117188918e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff420336'
}
      ✓ should turn 0x77656c636f6d6520746f20657468657265756d2e,true,0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e,-12451,-12451018,false to 00000000000000000000000077656c636f6d6520746f20657468657265756d2e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000077656c636f6d6520746f20657468657265756d2e00000000000000000000000077656c636f6d6520746f20657468657265756d2e00000000000000000000000077656c636f6d6520746f20657468657265756d2effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf5dffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4203360000000000000000000000000000000000000000000000000000000000000000
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007912310455017e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf2c3ae9'
}
{
  mask: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  bits: 256
}
{
  fromTwosComplement: true,
  ret: '1.15792089237316195423570985008687907853269984665640564039457584007913129621445e+77',
  num: 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb7c5'
}
      ✓ should turn 0xabef15,true,false,true,0xabef15,0xcdef151,0xabfe151,0x15abe391df19aef19a4561,true,0x77656c636f6d6520746f20657468657265756d2e,1840181,-819184919,0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e,-18491,false,1918491,0xabdcf151dae to 000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000003abef1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000001c1435ffffffffffffffffffffffffffffffffffffffffffffffffffffffffcf2c3ae900000000000000000000000077656c636f6d6520746f20657468657265756d2e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000003abef15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040cdef1510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040abfe151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000077656c636f6d6520746f20657468657265756d2e000000000000000000000000000000000000000000000000000000000000000b15abe391df19aef19a456100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001477656c636f6d6520746f20657468657265756d2e000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb7c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000001d461b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000060abdcf151dae0000000000000000000000000000000000000000000000000000
      ✓ should turn 0xabef15,0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e,0x77656c636f6d6520746f20657468657265756d2e,0xabef15,0x77656c636f6d6520746f20657468657265756d2e,0x81017589ab81017589ab81017589ab81017589ab,0x77656c636f6d6520746f20657468657265756d2e,0x81017589ab81017589ab81017589ab81017589ab,false to 00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000081017589ab81017589ab81017589ab81017589ab00000000000000000000000077656c636f6d6520746f20657468657265756d2e00000000000000000000000081017589ab81017589ab81017589ab81017589ab0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000077656c636f6d6520746f20657468657265756d2e00000000000000000000000077656c636f6d6520746f20657468657265756d2e0000000000000000000000000000000000000000000000000000000000000003abef15000000000000000000000000000000000000000000000000000000000000000000000000000000000077656c636f6d6520746f20657468657265756d2e00000000000000000000000077656c636f6d6520746f20657468657265756d2e00000000000000000000000077656c636f6d6520746f20657468657265756d2e00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000077656c636f6d6520746f20657468657265756d2e0000000000000000000000000000000000000000000000000000000000000003abef150000000000000000000000000000000000000000000000000000000000
      ✓ should turn 0xabef15,0xa,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff,0xaf,0xaf,0xbc,0xaf,0xbc,0xde to 000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003abef15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001af00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001af000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001bc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001af000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001bc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001de00000000000000000000000000000000000000000000000000000000000000

  contract
    event
      ✓ should create event filter (1523ms)
      ✓ should create event filter and watch immediately (511ms)
      ✓ should create all event filter (1508ms)
      ✓ should call constant function
      ✓ should call constant function with default block
      ✓ should sendTransaction to contract function
      ✓ should sendTransaction with tuples to contract function
      ✓ should make a call with optional params
      ✓ should throw if called with optional params without all args
      ✓ should explicitly make a call with optional params
      ✓ should explicitly make a call with optional params and defaultBlock
      ✓ it should throw if sendTransaction with optional params without all args
      ✓ should sendTransaction with optional params
      ✓ should sendTransaction with bigNum param and optional params
      ✓ should explicitly sendTransaction with optional params
      ✓ should explicitly sendTransaction with optional params and call callback without error
      ✓ should explicitly estimateGas with optional params
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should call testArr method and properly parse result
{ fromTwosComplement: true, ret: '3', num: '3' }
{ fromTwosComplement: true, ret: '5', num: '5' }
      ✓ should call testArr method, properly parse result and return the result async

  e2e.erc20
> Coinbase 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Balance 7.9228162514264337593543950335e+28
    ✓ should get the balance
> Unlocking account status=true
    ✓ should unlock the account
> Tx: 0xa533737e39544ab84decb5817c9b9f2788db255e7b96165137b1e20ad0c0f556
    ✓ deploys a new contract (218ms)
    ✓ gets the receipt
BigNumber { s: 1, e: 9, c: [ 2000000000 ] }
    ✓ gets the trasaction by hash
    ✓ gets the transaction  (38ms)
    ✓ getTransaction should return null for an unknown transaction
    ✓ should get 0 mana balance by default (164ms)
    ✓ should work with injected methods from ABI
    ✓ total supply 0
    ✓ mint 10 (129ms)
    ✓ mint 11 (120ms)
    ✓ balanceof 2 (43ms)
    ✓ total supply 21 (38ms)

  lib/web3/method
    getCall
      ✓ should return and error
      ✓ should return and error
      ✓ should return and error
      ✓ should return and error
      ✓ should return and error
      ✓ should return and error

  lib/web3/event
    decode
      ✓ test no: 0
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ test no: 1
{ fromTwosComplement: true, ret: '10', num: 'a' }
{ fromTwosComplement: true, ret: '16', num: '10' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '4', num: '4' }
      ✓ test no: 2
{ fromTwosComplement: true, ret: '10', num: 'a' }
{ fromTwosComplement: true, ret: '16', num: '10' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '4', num: '4' }
      ✓ test no: 3

  lib/web3/event
    encode
      ✓ test no: 0
{ fromTwosComplement: true, ret: '16', num: '10' }
      ✓ test no: 1
{ fromTwosComplement: true, ret: '4', num: '4' }
      ✓ test no: 2
{ fromTwosComplement: true, ret: '16', num: '10' }
{ fromTwosComplement: true, ret: '1', num: '1' }
{ fromTwosComplement: true, ret: '2', num: '2' }
      ✓ test no: 3
      ✓ test no: 4
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ test no: 5
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ test no: 6
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ test no: 7
{ fromTwosComplement: true, ret: '1', num: '1' }
      ✓ test no: 8

  lib/web3/formatters
    inputDefaultBlockNumberFormatter
      ✓ should turn latest to latest
      ✓ should turn pending to pending
      ✓ should turn earliest to earliest
      ✓ should turn 1 to 0x1
      ✓ should turn 0x1 to 0x1

  formatters
    inputPostFormatter
      ✓ should return the correct value

  formatters
    inputTransactionFormatter
      ✓ should return the correct value: 0
      ✓ should return the correct value: 1
      ✓ should return the correct value: 2
      ✓ should return the correct value: 3
      ✓ should return the correct value: 4

  formatters
    outputBlockFormatter
      ✓ should return the correct value
      ✓ should return the correct value, when null values are present

  formatters
    outputLogFormatter
      ✓ should return the correct value
      ✓ should return the correct value, when null values are present

  formatters
    outputPostFormatter
      ✓ should return the correct value

  formatters
    outputTransactionFormatter
      ✓ should return the correct value
      ✓ should return the correct value, when null values are present

  test types
    ✓ should get the addresses
    ✓ test toRPC
    ✓ web3_clientVersion must be string
    ✓ web3_sha3 must be string
    ✓ net_version must be string
    ✓ net_peerCount must be number
    ✓ net_listening must be boolean
    ✓ eth_protocolVersion must be number
    ✓ eth_syncing must be boolean
    ✓ eth_coinbase must be string
    ✓ eth_mining must be boolean
    ✓ eth_hashrate must be number
    ✓ eth_gasPrice must be Function
    ✓ eth_accounts must be array
    ✓ eth_blockNumber must be number
    ✓ eth_getBalance must be Function
    ✓ eth_getStorageAt must be string
    ✓ eth_getTransactionCount must be number
    ✓ eth_getCode must be string
    ✓ eth_sign must be string
    ✓ eth_getBlockByHash must be object
    ✓ eth_newFilter must be data
    ✓ eth_newBlockFilter must be data
    ✓ eth_newPendingTransactionFilter must be data
    ✓ eth_getFilterChanges must be array
    ✓ eth_getFilterLogs must be array
    ✓ eth_getLogs must be array
    ✓ eth_uninstallFilter must be boolean
    ✓ eth_uninstallFilter must be boolean
    ✓ eth_uninstallFilter must be boolean
    ✓ shh_version must be number

  integration.erc20
    ganache(injected):
      ✓ should return no instantiated contracts
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
> Coinbase 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Balance 7.9228162514264337593543950335e+28
      ✓ should get the balance
> Unlocking account status=true
      ✓ should unlock the account
> Account: 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Tx: 0xa533737e39544ab84decb5817c9b9f2788db255e7b96165137b1e20ad0c0f556
      ✓ deploys a new contract (197ms)
      ✓ gets the receipt
      ✓ gets the trasaction by hash
      ✓ gets the transaction 
      ✓ getTransaction should return null for an unknown transaction
      ✓ should get 0 mana balance by default (101ms)
      ✓ should work with injected methods from ABI (41ms)
      ✓ total supply must be 0
      ✓ mint 1 (120ms)
      ✓ total supply 10
      ✓ mint 2 (125ms)
      ✓ total supply 21
      ✓ waits the block (40ms)
      ✓ test allowance, one argument
      74) test allowance, invalid address
> allowance(0xebc757b8bfd562158b1bfded4e1cafe332d9845a,0x0f5d2fb29fb7d3cfee444a200298f468908cc942)
      ✓ test allowance (47ms)
> allowance( 0xebc757b8bfd562158b1bfded4e1cafe332d9845a ,   0x0f5d2fb29fb7d3cfee444a200298f468908cc942   
)
      75) test allowance with malformed addressess
> allowance(0x6224fe0bea79701d338cf65ebc0da0caa566c544,0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3)
      ✓ test for allowance using DG parameters (46ms)
      ✓ closes the provider
    ganache(http):
      ✓ should start the server
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
> Coinbase 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Balance 7.9228162514264337593543950335e+28
      ✓ should get the balance
> Unlocking account status=true
      ✓ should unlock the account
> Account: 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Tx: 0xa533737e39544ab84decb5817c9b9f2788db255e7b96165137b1e20ad0c0f556
      ✓ deploys a new contract (163ms)
      ✓ gets the receipt
      ✓ gets the trasaction by hash
      ✓ gets the transaction  (43ms)
      ✓ getTransaction should return null for an unknown transaction
      ✓ should get 0 mana balance by default (78ms)
      ✓ should work with injected methods from ABI
      ✓ total supply must be 0
      ✓ mint 1 (119ms)
      ✓ total supply 10 (52ms)
      ✓ mint 2 (126ms)
      ✓ total supply 21
      ✓ waits the block (43ms)
      ✓ test allowance, one argument
      76) test allowance, invalid address
SEND >> {"jsonrpc":"2.0","id":158,"method":"eth_accounts","params":[]}
RECV << {"id":158,"jsonrpc":"2.0","result":["0xebc757b8bfd562158b1bfded4e1cafe332d9845a"]}
> allowance(0xebc757b8bfd562158b1bfded4e1cafe332d9845a,0x0f5d2fb29fb7d3cfee444a200298f468908cc942)
SEND >> {"jsonrpc":"2.0","id":159,"method":"eth_call","params":[{"to":"0x411db042c73805cead35e55fffd164140db3239a","data":"0xdd62ed3e000000000000000000000000ebc757b8bfd562158b1bfded4e1cafe332d9845a0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942"},"latest"]}
RECV << {"id":159,"jsonrpc":"2.0","result":"0x0000000000000000000000000000000000000000000000000000000000000000"}
      ✓ test allowance (57ms)
SEND >> {"jsonrpc":"2.0","id":160,"method":"eth_accounts","params":[]}
RECV << {"id":160,"jsonrpc":"2.0","result":["0xebc757b8bfd562158b1bfded4e1cafe332d9845a"]}
> allowance( 0xebc757b8bfd562158b1bfded4e1cafe332d9845a ,   0x0f5d2fb29fb7d3cfee444a200298f468908cc942   
)
      77) test allowance with malformed addressess
> allowance(0x6224fe0bea79701d338cf65ebc0da0caa566c544,0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3)
SEND >> {"jsonrpc":"2.0","id":161,"method":"eth_call","params":[{"to":"0x411db042c73805cead35e55fffd164140db3239a","data":"0xdd62ed3e0000000000000000000000006224fe0bea79701d338cf65ebc0da0caa566c544000000000000000000000000bf79ce2fbd819e5abc2327563d02a200255b7cb3"},"latest"]}
RECV << {"id":161,"jsonrpc":"2.0","result":"0x0000000000000000000000000000000000000000000000000000000000000000"}
      ✓ test for allowance using DG parameters (49ms)
      ✓ closes the provider
    geth(ws):
> Coinbase 0x9c7de83416d367fbd56145d6213e9f36c978ec54
> Balance 1.15792089237316195423570985008687907853269984665640564039457584007913129638943e+77
      ✓ should get the balance
> Unlocking account status=true
      ✓ should unlock the account (659ms)
> Account: 0x9c7de83416d367fbd56145d6213e9f36c978ec54
> Tx: 0x1cbbe55b35dbf9e8673e35b53ed81d06a4acf282ad0324ae22450dac6a2e6d1d
      ✓ deploys a new contract
      ✓ gets the receipt
      ✓ gets the trasaction by hash
      ✓ gets the transaction 
      ✓ getTransaction should return null for an unknown transaction
      ✓ should get 0 mana balance by default
      ✓ should work with injected methods from ABI
      ✓ total supply must be 0
      ✓ mint 1
      ✓ total supply 10
      ✓ mint 2
      ✓ total supply 21
      ✓ waits the block
      ✓ test allowance, one argument
      78) test allowance, invalid address
SEND >> {"jsonrpc":"2.0","id":206,"method":"eth_accounts","params":[]}
RECV << {"jsonrpc":"2.0","id":206,"result":["0x9c7de83416d367fbd56145d6213e9f36c978ec54","0x95b948ac8db45d0d9b5998d2c5d7fbe81afd0e0a","0xc58b145417ac8dad0a9a6e8d017d93b5faccb325","0x63a52c331d49850499931d63a683ddfbadcc7f85","0xdd1d9cb976e3671602b275f4c02302497e8989c0","0x6c300acb4e8d37a0bed43eccefd490e1170ec2cd","0x67ae475cfbadf58c54a4631974a25019a5f34d33","0x19da5f8c3bb6f1c6c962268c53d2b70c746a0a72","0xc5178bd3ef0c4e2d273e2999947c65e917a80ac3"]}

> allowance(0x9c7de83416d367fbd56145d6213e9f36c978ec54,0x0f5d2fb29fb7d3cfee444a200298f468908cc942)
SEND >> {"jsonrpc":"2.0","id":207,"method":"eth_call","params":[{"to":"0xf4e6d5aaf997ce197d8b620ee7a74cfad88cb404","data":"0xdd62ed3e0000000000000000000000009c7de83416d367fbd56145d6213e9f36c978ec540000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942"},"latest"]}
RECV << {"jsonrpc":"2.0","id":207,"result":"0x0000000000000000000000000000000000000000000000000000000000000000"}

      ✓ test allowance
SEND >> {"jsonrpc":"2.0","id":208,"method":"eth_accounts","params":[]}
RECV << {"jsonrpc":"2.0","id":208,"result":["0x9c7de83416d367fbd56145d6213e9f36c978ec54","0x95b948ac8db45d0d9b5998d2c5d7fbe81afd0e0a","0xc58b145417ac8dad0a9a6e8d017d93b5faccb325","0x63a52c331d49850499931d63a683ddfbadcc7f85","0xdd1d9cb976e3671602b275f4c02302497e8989c0","0x6c300acb4e8d37a0bed43eccefd490e1170ec2cd","0x67ae475cfbadf58c54a4631974a25019a5f34d33","0x19da5f8c3bb6f1c6c962268c53d2b70c746a0a72","0xc5178bd3ef0c4e2d273e2999947c65e917a80ac3"]}

> allowance( 0x9c7de83416d367fbd56145d6213e9f36c978ec54 ,   0x0f5d2fb29fb7d3cfee444a200298f468908cc942   
)
      79) test allowance with malformed addressess
> allowance(0x6224fe0bea79701d338cf65ebc0da0caa566c544,0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3)
SEND >> {"jsonrpc":"2.0","id":209,"method":"eth_call","params":[{"to":"0xf4e6d5aaf997ce197d8b620ee7a74cfad88cb404","data":"0xdd62ed3e0000000000000000000000006224fe0bea79701d338cf65ebc0da0caa566c544000000000000000000000000bf79ce2fbd819e5abc2327563d02a200255b7cb3"},"latest"]}
RECV << {"jsonrpc":"2.0","id":209,"result":"0x0000000000000000000000000000000000000000000000000000000000000000"}

      ✓ test for allowance using DG parameters

  integration.escrow
    ganache(injected):
      ✓ should return no instantiated contracts
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
> Unlocking account status=true
      ✓ should unlock the account
> Account: 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Tx: 0x862118f79c3a7a02dc4ed21607309799d38d7f5d8c959d3ab467df211cfc94f4
      ✓ deploys a new contract (151ms)
      ✓ deposit (132ms)
      ✓ closes the provider
    ganache(http):
      ✓ should start the server
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
> Unlocking account status=true
      ✓ should unlock the account
> Account: 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Tx: 0x862118f79c3a7a02dc4ed21607309799d38d7f5d8c959d3ab467df211cfc94f4
      ✓ deploys a new contract (148ms)
      ✓ deposit (141ms)
      ✓ closes the provider
    geth(ws):
> Unlocking account status=true
      ✓ should unlock the account (701ms)
> Account: 0x9c7de83416d367fbd56145d6213e9f36c978ec54
> Tx: 0xcef88942bcbe89e3ef69cd1630c2a0ef23a86694c6fe2949fdf383d6830c75e0
      ✓ deploys a new contract
      ✓ deposit

  integration.events
    ganache(injected):
      ✓ should return no instantiated contracts
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
> Using account 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
      ✓ should get the addresses
> Unlocking account status=true
      ✓ should unlock the account
      ✓ creates the filters
> Tx: 0x2c0938bdf8182e133126dc445ba058a79b4709d8e437a6d92b7eeed59d44efcc
      ✓ deploys a new contract (114ms)
      ✓ gets the receipt
      ✓ gets the trasaction
      ✓ setInstructor("agustin", 99) (93ms)
      ✓ setInstructorEvent("agustin", 99) (117ms)
      ✓ getInstructor() (48ms)
      ✓ did receive a filter message (96ms)
      ✓ did receive a filter block
      ✓ did receive a filter pending message
      ✓ did receive a allEvents filter message (118ms)
      ✓ should create and destroy a filter without start
      ✓ should get the logs from EthFilter
      ✓ tears down the EthFilter (365ms)
      ✓ tears down the EthBlockFilter
      ✓ tears down the EthPendingTransactionFilter (502ms)
      ✓ tears down the allEvents EthFilter (120ms)
      ✓ closes the provider
    ganache(http):
      ✓ should start the server
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
> Using account 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
      ✓ should get the addresses
> Unlocking account status=true
      ✓ should unlock the account
      ✓ creates the filters (52ms)
> Tx: 0x2c0938bdf8182e133126dc445ba058a79b4709d8e437a6d92b7eeed59d44efcc
      ✓ deploys a new contract (136ms)
      ✓ gets the receipt
      ✓ gets the trasaction
      ✓ setInstructor("agustin", 99) (118ms)
      ✓ setInstructorEvent("agustin", 99) (142ms)
      ✓ getInstructor() (58ms)
      ✓ did receive a filter message
      ✓ did receive a filter block
      ✓ did receive a filter pending message
      ✓ did receive a allEvents filter message (142ms)
      ✓ should create and destroy a filter without start
      ✓ should get the logs from EthFilter
      ✓ tears down the EthFilter (339ms)
      ✓ tears down the EthBlockFilter (509ms)
      ✓ tears down the EthPendingTransactionFilter
      ✓ tears down the allEvents EthFilter (130ms)
      ✓ closes the provider
    geth(ws):
> Using account 0x9c7de83416d367fbd56145d6213e9f36c978ec54
      ✓ should get the addresses
> Unlocking account status=true
      ✓ should unlock the account (688ms)
      ✓ creates the filters
> Tx: 0xd41b63799cffbd30c85f4132e7bf3e340339ca68e0ef76da8c2cd95bd31cd847
      ✓ deploys a new contract
      ✓ gets the receipt
      ✓ gets the trasaction
      ✓ setInstructor("agustin", 99)
      ✓ setInstructorEvent("agustin", 99)
      ✓ getInstructor()
      ✓ did receive a filter message (421ms)
      ✓ did receive a filter block
      ✓ did receive a filter pending message
      ✓ did receive a allEvents filter message
      ✓ should create and destroy a filter without start
      ✓ should get the logs from EthFilter
      ✓ tears down the EthFilter (461ms)
      ✓ tears down the EthBlockFilter (505ms)
      ✓ tears down the EthPendingTransactionFilter (503ms)
      ✓ tears down the allEvents EthFilter

  integration.overload
    ganache(injected):
      ✓ should return no instantiated contracts
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
> Using account 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
      ✓ should get the addresses
> Coinbase 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Balance 7.9228162514264337593543950335e+28
      ✓ should get the balance
> Unlocking account status=true
      ✓ should unlock the account
> Tx: 0x8398f144944305d9e034d23415bd62562d48bdb611ff64228bd03cc310d89c97
      ✓ deploys a new contract (120ms)
      ✓ gets the receipt
      ✓ gets the trasaction
      ✓ test() == 1
      ✓ test(uint256) == 222
      ✓ test(uint256,uint256) == 333 (38ms)
      ✓ closes the provider
    ganache(http):
      ✓ should start the server
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
> Using account 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
      ✓ should get the addresses
> Coinbase 0xebc757b8bfd562158b1bfded4e1cafe332d9845a
> Balance 7.9228162514264337593543950335e+28
      ✓ should get the balance
> Unlocking account status=true
      ✓ should unlock the account
> Tx: 0x8398f144944305d9e034d23415bd62562d48bdb611ff64228bd03cc310d89c97
      ✓ deploys a new contract (125ms)
      ✓ gets the receipt
      ✓ gets the trasaction
      ✓ test() == 1
      ✓ test(uint256) == 222
      ✓ test(uint256,uint256) == 333
      ✓ closes the provider
    geth(ws):
> Using account 0x9c7de83416d367fbd56145d6213e9f36c978ec54
      ✓ should get the addresses
> Coinbase 0x9c7de83416d367fbd56145d6213e9f36c978ec54
> Balance 1.1579208923731619542357098500868790785326998466564056403945758400791312963882e+77
      ✓ should get the balance
> Unlocking account status=true
      ✓ should unlock the account (685ms)
> Tx: 0x06581e9dbb9e28df44de550b4d9e9c25715df9d083cfe45b57d51f1baf02c1f9
      ✓ deploys a new contract
      ✓ gets the receipt
      ✓ gets the trasaction
      ✓ test() == 1
      ✓ test(uint256) == 222
      ✓ test(uint256,uint256) == 333

  integration.personal
    ganache(injected):
      ✓ should return no instantiated contracts
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
      ✓ should create an account
      ✓ should get the list of accounts
      ✓ should sign a message (geth only) and recover the signer address
      ✓ should unlock the account
      ✓ should lock the account
      ✓ closes the provider
    ganache(http):
      ✓ should start the server
Network version: 3
      ✓ should get the network
Protocol version: 63
      ✓ should get the protocol version
      ✓ should create an account
      ✓ should get the list of accounts
      ✓ should sign a message (geth only) and recover the signer address
      ✓ should unlock the account
      ✓ should lock the account
      ✓ closes the provider
    geth(ws):
      ✓ should create an account (1474ms)
      ✓ should get the list of accounts
      ✓ should sign a message (geth only) and recover the signer address (714ms)
      ✓ should unlock the account (666ms)
      ✓ should lock the account

  lib/web3/jsonrpc
    id
      ✓ should increment the id

  jsonrpc
    isValidResponse
      ✓ should validate basic jsonrpc response
      ✓ should validate basic undefined response
      ✓ should validate jsonrpc response without jsonrpc field
      ✓ should validate jsonrpc response with wrong jsonrpc version
      ✓ should validate jsonrpc response without id number
      ✓ should validate jsonrpc response with wrong id field
      ✓ should validate jsonrpc response without result field
      ✓ should validate jsonrpc response with result field === false
      ✓ should validate jsonrpc response with result field === 0

  jsonrpc
    toBatchPayload
      ✓ should create basic batch payload
      ✓ should create batch payload for empty input array

  jsonrpc
    toPayload
      ✓ should create basic payload
      ✓ should create payload with params

  lib/web3/method
    formatOutput
      ✓ should format plain output

  lib/web3/method
    validateArgs
      ✓ should pass
      ✓ should return call based on args

  lib/web3/requestmanager
    send
      ✓ should return expected result asynchronously

  lib/utils/sha3
    ✓ should encode test123 to f81b517a242b218999ec8eec0ea6e2ddbef2a367a14e93f4a32a39e260f686ad
    ✓ should encode test(int) to f4d03772bec1e62fbe8c5691e1a9101e520e8f8b5ca612123694632bf3cb51b1
    ✓ should encode 0x80 to 56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421
    ✓ should encode 0x80 to 6b03a5eef7706e3fb52a61c19ab1122fad7237726601ac665bd4def888f0e4a0
    ✓ should encode 0x3c9229289a6125f7fdf1885a77bb12c37a8d3b4962d936f7e3084dece32a3ca1 to 82ff40c0a986c6a5cfad4ddf4c3aa6996f1a7837f9c398e17e5de5cbd5a12b28

  solidityfunction
    ✓ works to produce an output for allowance
    ✓ works to produce an output for transfer

  lib/utils/utils
    extractDisplayName
      ✓ should extract display name from method with no params
      ✓ should extract display name from method with one param
      ✓ should extract display name from method with two params

  lib/utils/utils
    extractTypeName
      ✓ should extract type name from method with no params
      ✓ should extract type name from method with one param
      ✓ should extract type name from method with two params
      ✓ should extract type name from method with spaces between params

  lib/utils/utils
    fromAscii
      ✓ should turn myString to 0x6d79537472696e67
      ✓ should turn myString  to 0x6d79537472696e6700
      ✓ should turn    5èÆÕL]|Î¾7«2(ÐY
<      e!ßd/ñõì:z¦Î¦±ç·÷Í¢Ëß6*ñùC1ÉUÀé2ÓB to 0x0300000035e8c6d54c5d127c9dcebe9e1a37ab9b05321128d097590a3c100000000000006521df642ff1f5ec0c3a7aa6cea6b1e7b7f7cda2cbdf07362a85088e97f19ef94331c955c0e9321ad386428c
      ✓ should turn myString to 0x6d79537472696e670000000000000000
      ✓ should turn myString  to 0x6d79537472696e670000000000000000
      ✓ should turn    5èÆÕL]|Î¾7«2(ÐY
<      e!ßd/ñõì:z¦Î¦±ç·÷Í¢Ëß6*ñùC1ÉUÀé2ÓB to 0x0300000035e8c6d54c5d127c9dcebe9e1a37ab9b05321128d097590a3c100000000000006521df642ff1f5ec0c3a7aa6cea6b1e7b7f7cda2cbdf07362a85088e97f19ef94331c955c0e9321ad386428c00000

  lib/utils/utils
    fromDecimal
      ✓ should turn 1 to 0x1
      ✓ should turn 1 to 0x1
      ✓ should turn 0x1 to 0x1
      ✓ should turn 0x01 to 0x1
      ✓ should turn 15 to 0xf
      ✓ should turn 15 to 0xf
      ✓ should turn 0xf to 0xf
      ✓ should turn 0x0f to 0xf
      ✓ should turn -1 to -0x1
      ✓ should turn -1 to -0x1
      ✓ should turn -0x1 to -0x1
      ✓ should turn -0x01 to -0x1
      ✓ should turn -15 to -0xf
      ✓ should turn -15 to -0xf
      ✓ should turn -0xf to -0xf
      ✓ should turn -0x0f to -0xf
      ✓ should turn 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
      ✓ should turn 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd to 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd
      ✓ should turn -0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to -0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
      ✓ should turn -0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd to -0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd
      ✓ should turn 0 to 0x0
      ✓ should turn 0 to 0x0
      ✓ should turn 0x0 to 0x0
      ✓ should turn 0 to 0x0
      ✓ should turn -0 to 0x0
      ✓ should turn -0x0 to 0x0

  lib/utils/utils
    fromUtf8
      ✓ should turn myString to 0x6d79537472696e67
      ✓ should turn myString  to 0x6d79537472696e67
      ✓ should turn 我能吞下玻璃而不伤身体。 to 0xe68891e883bde5909ee4b88be78ebbe79283e8808ce4b88de4bca4e8baabe4bd93e38082
      ✓ should turn 나는 유리를 먹을 수 있어요. 그래도 아프지 않아요 to 0xeb8298eb8a9420ec9ca0eba6aceba5bc20eba8b9ec9d8420ec889820ec9e88ec96b4ec9a942e20eab7b8eb9e98eb8f8420ec9584ed9484eca78020ec958aec9584ec9a94
      ✓ should turn expected value    to 0x65787065637465642076616c7565

  lib/utils/utils
    fromWei
      ✓ should return the correct value

  lib/utils/utils
    isAddress
      ✓ shoud test if value function () {
            /* */
        } is address: false
      ✓ shoud test if value function anonymous(
) {

} is address: false
      ✓ shoud test if value function is address: false
      ✓ shoud test if value [object Object] is address: false
      ✓ shoud test if value 0xc6d9d2cd449a754c494264e1809c50e34d64562b is address: true
      ✓ shoud test if value c6d9d2cd449a754c494264e1809c50e34d64562b is address: true
      ✓ shoud test if value 0xE247A45c287191d435A8a5D72A7C8dc030451E9F is address: true
      ✓ shoud test if value 0xE247a45c287191d435A8a5D72A7C8dc030451E9F is address: false
      ✓ shoud test if value 0xe247a45c287191d435a8a5d72a7c8dc030451e9f is address: true
      ✓ shoud test if value 0XE247A45C287191D435A8A5D72A7C8DC030451E9F is address: false
      ✓ shoud test if value 0xE247A45C287191D435A8A5D72A7C8DC030451E9F is address: true
      ✓ shoud test if value 0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3 is address: true

  lib/utils/utils
    isBigNumber
      ✓ shoud test if value function () {
            /* stub */
        } is BigNumber: false
      ✓ shoud test if value function anonymous(
) {

} is BigNumber: false
      ✓ shoud test if value function is BigNumber: false
      ✓ shoud test if value [object Object] is BigNumber: false
      ✓ shoud test if value hello is BigNumber: false
      ✓ shoud test if value 0 is BigNumber: true
      ✓ shoud test if value 132 is BigNumber: false
      ✓ shoud test if value 0x12 is BigNumber: false

  lib/utils/utils
    isChecksumAddress
      ✓ shoud test if address 0x52908400098527886E0F7030069857D2E4169EE7 passes checksum: true
      ✓ shoud test if address 0x8617E340B3D01FA5F11F306F4090FD50E238070D passes checksum: true
      ✓ shoud test if address 0xde709f2102306220921060314715629080e2fb77 passes checksum: true
      ✓ shoud test if address 0x27b1fdb04752bbc536007a920d24acb045561c26 passes checksum: true
      ✓ shoud test if address 0x5aAeb6053F3E94C9b9A09f33669435E7Ef1BeAed passes checksum: true
      ✓ shoud test if address 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359 passes checksum: true
      ✓ shoud test if address 0xdbF03B407c01E7cD3CBea99509d93f8DDDC8C6FB passes checksum: true
      ✓ shoud test if address 0xD1220A0cf47c7B9Be7A2E6BA89F429762e7b9aDb passes checksum: true
      ✓ shoud test if address 0XD1220A0CF47C7B9BE7A2E6BA89F429762E7B9ADB passes checksum: false
      ✓ shoud test if address 0xd1220a0cf47c7b9be7a2e6ba89f429762e7b9adb passes checksum: false

  lib/utils/utils
    isFunction
      ✓ shoud test if value function () {
            /* */
        } is function: true
      ✓ shoud test if value () => void 0 is function: true
      ✓ shoud test if value function anonymous(
) {

} is function: true
      ✓ shoud test if value function is function: false
      ✓ shoud test if value [object Object] is function: false

  lib/utils/utils
    isJson
      ✓ shoud test if value function () {
            /* stub */
        } is json: false
      ✓ shoud test if value function anonymous(
) {

} is json: false
      ✓ shoud test if value function is json: false
      ✓ shoud test if value [object Object] is json: false
      ✓ shoud test if value [] is json: true
      ✓ shoud test if value [1, 2] is json: true
      ✓ shoud test if value {} is json: true
      ✓ shoud test if value {"a": 123, "b" :3,} is json: false
      ✓ shoud test if value {"c" : 2} is json: true

  lib/utils/utils
    isStrictAddress
      ✓ shoud test if value function () {
            /* stub */
        } is address: false
      ✓ shoud test if value function anonymous(
) {

} is address: false
      ✓ shoud test if value function is address: false
      ✓ shoud test if value [object Object] is address: false
      ✓ shoud test if value 0xc6d9d2cd449a754c494264e1809c50e34d64562b is address: true
      ✓ shoud test if value c6d9d2cd449a754c494264e1809c50e34d64562b is address: false

  lib/utils/utils
    isString
      ✓ shoud test if value function () {
            /* stub */
        } is string: false
      ✓ shoud test if value function anonymous(
) {

} is string: false
      ✓ shoud test if value function is string: true
      ✓ shoud test if value [object Object] is string: false
      ✓ shoud test if value hello is string: true

  lib/utils/utils
    toAscii
      ✓ should turn 0x6d79537472696e67 to myString
      ✓ should turn 0x6d79537472696e6700 to myString 
      ✓ should turn 0x0300000035e8c6d54c5d127c9dcebe9e1a37ab9b05321128d097590a3c100000000000006521df642ff1f5ec0c3a7aa6cea6b1e7b7f7cda2cbdf07362a85088e97f19ef94331c955c0e9321ad386428c to    5èÆÕL]|Î¾7«2(ÐY
<      e!ßd/ñõì:z¦Î¦±ç·÷Í¢Ëß6*ñùC1ÉUÀé2ÓB

  lib/utils/utils
    toBigNumber
      ✓ should turn 1 to 1
      ✓ should turn 1 to 1
      ✓ should turn 0x1 to 1
      ✓ should turn 0x01 to 1
      ✓ should turn 15 to 15
      ✓ should turn 15 to 15
      ✓ should turn 0xf to 15
      ✓ should turn 0x0f to 15
      ✓ should turn 15 to 15
      ✓ should turn -1 to -1
      ✓ should turn -1 to -1
      ✓ should turn -0x1 to -1
      ✓ should turn -0x01 to -1
      ✓ should turn -15 to -15
      ✓ should turn -15 to -15
      ✓ should turn -0xf to -15
      ✓ should turn -0x0f to -15
      ✓ should turn 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to 115792089237316195423570985008687907853269984665640564039457584007913129639935
      ✓ should turn 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd to 115792089237316195423570985008687907853269984665640564039457584007913129639933
      ✓ should turn -0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to -115792089237316195423570985008687907853269984665640564039457584007913129639935
      ✓ should turn -0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd to -115792089237316195423570985008687907853269984665640564039457584007913129639933
      ✓ should turn 0 to 0
      ✓ should turn 0 to 0
      ✓ should turn 0x0 to 0
      ✓ should turn 0 to 0
      ✓ should turn -0 to 0
      ✓ should turn -0x0 to 0
      ✓ should turn 0 to 0

  lib/utils/utils
    toDecimal
      ✓ should return the correct value

  lib/utils/utils
    toHex
      ✓ should turn 1 to 0x1
      ✓ should turn 1 to 0x1
      ✓ should turn 0x1 to 0x1
      ✓ should turn 15 to 0xf
      ✓ should turn 0xf to 0xf
      ✓ should turn -1 to -0x1
      ✓ should turn -1 to -0x1
      ✓ should turn -0x1 to -0x1
      ✓ should turn -15 to -0xf
      ✓ should turn -0xf to -0xf
      ✓ should turn 0x657468657265756d to 0x657468657265756d
      ✓ should turn 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd to 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd
      ✓ should turn -0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to -0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
      ✓ should turn -0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd to -0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd
      ✓ should turn 0 to 0x0
      ✓ should turn 0 to 0x0
      ✓ should turn 0x0 to 0x0
      ✓ should turn 0 to 0x0
      ✓ should turn -0 to 0x0
      ✓ should turn -0x0 to 0x0
      ✓ should turn 1,2,3,[object Object] to 0x5b312c322c332c7b2274657374223a2264617461227d5d
      ✓ should turn [object Object] to 0x7b2274657374223a2274657374227d
      ✓ should turn {"test": "test"} to 0x7b2274657374223a202274657374227d
      ✓ should turn myString to 0x6d79537472696e67
      ✓ should turn 내가 제일 잘 나가 to 0xeb82b4eab08020eca09cec9dbc20ec9e9820eb8298eab080
      ✓ should turn 15 to 0xf
      ✓ should turn true to 0x1
      ✓ should turn false to 0x0
      ✓ should turn    5èÆÕL]|Î¾7«2(ÐY
<      e!ßd/ñõì:z¦Î¦±ç·÷Í¢Ëß6*ñùC1ÉUÀé2ÓB to 0x0300000035c3a8c386c3954c5d127cc29dc38ec2bec29e1a37c2abc29b05321128c390c297590a3c100000000000006521c39f642fc3b1c3b5c3ac0c3a7ac2a6c38ec2a6c2b1c3a7c2b7c3b7c38dc2a2c38bc39f07362ac28508c28ec297c3b1c29ec3b94331c38955c380c3a9321ac393c28642c28c

  lib/utils/utils
    toTwosComplement
      ✓ printing 1
      ✓ printing 1
      ✓ printing 0x1
      ✓ printing 15
      ✓ printing 0xf
      ✓ printing -1
      ✓ printing -1
      ✓ printing -0x1
      ✓ printing -15
      ✓ printing -0xf
      ✓ printing 0
      ✓ printing 0
      ✓ printing 0x0
      ✓ printing 0
      ✓ printing -0
      ✓ printing -0x0
      ✓ printing 15

  lib/utils/utils
    toUtf8
      ✓ should turn 0x6d79537472696e67 to myString
      ✓ should turn 0x6d79537472696e6700 to myString
      ✓ should turn 0x65787065637465642076616c7565000000000000000000000000000000000000 to expected value

  lib/utils/utils
    toWei
      ✓ should return the correct value

  web3.eth
    accounts
      ✓ property test: 0

  web3.eth
    blockNumber
      ✓ property test: 0

  eth_call
    ✓ async test: 0
    ✓ async test: 1

  web3.eth
    coinbase
      ✓ property test: 0

  web3.eth.contract
    ✓ should create simple contract with one method from abi with explicit type name
    ✓ should create simple contract with one method from abi with implicit type name
    ✓ should create contract with multiple methods
    ✓ should create contract with overloaded methods
    ✓ should create contract with no methods
    ✓ should create contract with one event
    ✓ should create contract with nondefault constructor

  eth_estimateGas
    ✓ async test: 0

  eth.filter
    ✓ Test EthFilter (508ms)
    ✓ Test EthFilter polling (2019ms)
    ✓ EthBlockFilter (504ms)
    ✓ EthPendingTransactionFilter (508ms)

  web3.eth
    gasPrice
      ✓ property test: 0

  eth_getBalance
    ✓ async test: 0
    ✓ async test: 1
    ✓ async test: 2
    ✓ async test: 3
    ✓ async test: 4
    ✓ async test: 5
    ✓ async test: 6
    ✓ async test: 7
    ✓ async test: 8

  eth_getBlockByHash
    ✓ async test: 0

  eth_getBlockByNumber
    ✓ async test: 0
    ✓ async test: 1

  eth_getBlockTransactionCountByHash
    ✓ async test: 0

  eth_getBlockTransactionCountByNumber
    ✓ async test: 0
    ✓ async test: 1

  eth_getUncleCountByBlockHash
    ✓ async test: 0

  eth_getUncleCountByBlockNumber
    ✓ async test: 0
    ✓ async test: 1

  eth_getCode
    ✓ async test: 0
    ✓ async test: 1

  eth_getStorageAt
    ✓ async test: 0
    ✓ async test: 1
    ✓ async test: 2
    ✓ async test: 3

  eth
    getSyncing
      ✓ syncing object

  eth_getTransactionByHash
    ✓ async test: 0

  eth_getTransactionByBlockNumberAndIndex
    ✓ async test: 0

  eth_getTransactionByBlockHashAndIndex
    ✓ async test: 0

  eth_getTransactionReceipt
    ✓ async test: 0

  eth_getUncleByBlockNumberAndIndex
    ✓ async test: 0
    ✓ async test: 1

  eth_getUncleByBlockHashAndIndex
    ✓ async test: 0

  eth_getWork
    ✓ async test: 0

  web3.eth
    hashrate
      ✓ property test: 0

  web3.eth
    mining
      ✓ property test: 0

  eth.protocolVersion
    protocolVersion
      ✓ property test: 0

  eth_submitWork
    ✓ async test: 0

  web3.net
    listening
      ✓ property test: 0

  web3.net
    peerCount
      ✓ property test: 0

  web3.personal
    listAccounts
      ✓ property test: 0

  personal_newAccount
    ✓ async test: 0

  personal_unlockAccount
    ✓ async test: 0
    ✓ async test: 1

  sha3
    ✓ hash fidelity check

  shh.filter
    ✓ test shh (506ms)

  shh_post
    ✓ async test: 0


  896 passing (26s)
  79 failing

  1) geth/packing
       unpack: should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to "-1":
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 1

- "-1"
+ "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77"
      at Context.<anonymous> (test/geth.packing.ts:967:74)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  2) geth/packing
       pack: should turn {"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0} to 0100000000000000000000000000000000000000000000000000000000000000:
     Error: invalid type (arg="type", value="function", fullType={"type":"function"}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at Object.encodeParams (src/solidity/coder.ts:50:50)
      at Context.<anonymous> (test/geth.packing.ts:964:34)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  3) geth/packing
       unpack: should turn 0100000000000000000000000000000000000000000000000000000000000000 to {"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0}:
     Error: invalid type (arg="type", value="function", fullType={"type":"function"}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at Object.decodeParams (src/solidity/coder.ts:81:36)
      at Context.<anonymous> (test/geth.packing.ts:967:34)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  4) geth/packing
       unpack: should turn 010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000 to [[{"0":1},{"0":2},{"0":3}],[{"0":3},{"0":4},{"0":5}]]:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -   0
+ Received  + 186

  Array [
    Array [
      Uint8Array [
        1,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
      ],
      Uint8Array [
        2,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
      ],
      Uint8Array [
        3,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
      ],
    ],
    Array [
      Uint8Array [
        3,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
      ],
      Uint8Array [
        4,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
      ],
      Uint8Array [
        5,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
      ],
    ],
  ]
      at Context.<anonymous> (test/geth.packing.ts:967:74)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  5) geth/packing
       unpack: should turn 00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000 to {"a":"1","b":"1","c":"-1","d":true,"e":[[{"0":1},{"0":2},{"0":3}],[{"0":3},{"0":4},{"0":5}]]}:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -   1
+ Received  + 187

  Tuple [
    "1",
    "1",
-   "-1",
+   "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77",
    true,
    Array [
      Array [
        Uint8Array [
          1,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
        ],
        Uint8Array [
          2,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
        ],
        Uint8Array [
          3,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
        ],
      ],
      Array [
        Uint8Array [
          3,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
        ],
        Uint8Array [
          4,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
        ],
        Uint8Array [
          5,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
+         0,
        ],
      ],
    ],
  ]
      at Context.<anonymous> (test/geth.packing.ts:967:74)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  6) geth/packing
       unpack: should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003666f6f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003626172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c2 to {"a":"foobar","b":"1","c":{"0":1},"d":["foo","bar"],"e":["1","-1"],"f":["0x407d73d8a49eeb85d32cf465507dd71d507100c1","0x407d73d8a49eeb85d32cf465507dd71d507100c2"]}:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 1

  Tuple [
    "foobar",
    "1",
    Uint8Array [
      1,
    ],
    Array [
      "foo",
      "bar",
    ],
    Array [
      "1",
-     "-1",
+     "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77",
    ],
    Array [
      "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
      "0x407d73d8a49eeb85d32cf465507dd71d507100c2",
    ],
  ]
      at Context.<anonymous> (test/geth.packing.ts:967:74)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  7) geth/packing
       unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000eto {"a":{"a":"1","b":["1","2"]},"b":["1","2"]}:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 4
+ Received  + 4

  Tuple [
-   Object {
-     "a": "1",
-     "b": Array [
+   Tuple [
+     "1",
+     Array [
        "1",
        "2",
      ],
-   },
+   ],
    Array [
      "1",
      "2",
    ],
  ]
      at Context.<anonymous> (test/geth.packing.ts:967:74)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  8) geth/packing
       unpack: should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to [{"a":"-1","b":["1","3"]},{"a":"1","b":["2","-1"]}]:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 2
+ Received  + 2

  Array [
    Tuple [
-     "-1",
+     "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77",
      Array [
        "1",
        "3",
      ],
    ],
    Tuple [
      "1",
      Array [
        "2",
-       "-1",
+       "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77",
      ],
    ],
  ]
      at Context.<anonymous> (test/geth.packing.ts:967:74)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  9) geth/packing
       unpack: should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to [{"a":"-1","b":"1"},{"a":"1","b":"-1"}]:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 2
+ Received  + 2

  Array [
    Tuple [
-     "-1",
+     "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77",
      "1",
    ],
    Tuple [
      "1",
-     "-1",
+     "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77",
    ],
  ]
      at Context.<anonymous> (test/geth.packing.ts:967:74)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  10) geth/packing
       pack: should turn [[{"a":"-1","b":"1"}],[{"a":"1","b":"-1"}]] to 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
     Error: expected array value (arg="a", coderType="array", value={"a":"-1","b":"1"}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderArray.encode (src/abi/coder.ts:743:20)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderArray.encode (src/abi/coder.ts:760:40)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at AbiCoder.encode (src/abi/coder.ts:935:61)
      at Object.encodeParams (src/solidity/coder.ts:50:50)
      at Context.<anonymous> (test/geth.packing.ts:964:34)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  11) geth/packing
       unpack: should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to [[{"a":"-1","b":"1"}],[{"a":"1","b":"-1"}]]:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 4
+ Received  + 4

  Array [
-   Array [
    Tuple [
-       "-1",
+     Array [
+       "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77",
        "1",
      ],
    ],
+   Tuple [
      Array [
-     Tuple [
        "1",
-       "-1",
+       "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77",
      ],
    ],
  ]
      at Context.<anonymous> (test/geth.packing.ts:967:74)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  12) lib/solidity/coder
       decodeParam
         should turn 000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c20000000000000000000000000000000000000000000000000000000000000002000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4 to address[][2]=0x407d73d8a49eeb85d32cf465507dd71d507100c1,0x407d73d8a49eeb85d32cf465507dd71d507100c2,0x407d73d8a49eeb85d32cf465507dd71d507100c3,0x407d73d8a49eeb85d32cf465507dd71d507100c4:
     Error: insufficuent data for address type (arg="", coderType="address", value="00000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4", version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderAddress.decode (src/abi/coder.ts:518:20)
      at CoderAnonymous.decode (src/abi/coder.ts:322:27)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:682:32
      at Array.forEach (<anonymous>)
      at unpack (src/abi/coder.ts:674:12)
      at CoderArray.decode (src/abi/coder.ts:795:22)
      at CoderAnonymous.decode (src/abi/coder.ts:322:27)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:677:32
      at Array.forEach (<anonymous>)
      at unpack (src/abi/coder.ts:674:12)
      at CoderArray.decode (src/abi/coder.ts:795:22)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:702:32
      at Array.forEach (<anonymous>)
      at unpackWithNames (src/abi/coder.ts:699:12)
      at CoderTuple.decode (src/abi/coder.ts:819:22)
      at AbiCoder.decode (src/abi/coder.ts:939:61)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  13) lib/solidity/coder
       decodeParam
         should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to int=-1:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 1

- "-1"
+ "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77"
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  14) lib/solidity/coder
       decodeParam
         should turn ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff to int256=-1:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 1
+ Received  + 1

- "-1"
+ "1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77"
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  15) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000010 to int8=16:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "16"
Received: 16
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  16) lib/solidity/coder
       decodeParam
         should turn 00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002 to int8[2]=16,2:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 2
+ Received  + 2

  Array [
-   "16",
-   "2",
+   16,
+   2,
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  17) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000010 to int32=16:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "16"
Received: 16
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  18) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000010 to uint8=16:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "16"
Received: 16
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  19) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000010 to uint32=16:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "16"
Received: 16
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  20) lib/solidity/coder
       decodeParam
         should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000096761766f66796f726b0000000000000000000000000000000000000000000000 to bytes=0x6761766f66796f726b:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0x6761766f66796f726b"
Received: [103, 97, 118, 111, 102, 121, 111, 114, 107]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  21) lib/solidity/coder
       decodeParam
         should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to bytes=0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b"
Received: [115, 26, 58, 252, 0, 209, 177, 227, 70, 27, 149, 94, 83, 252, 134, 109, 207, 48, 59, 62, 185, 244, 193, 111, 137, 227, 136, 147, 15, 72, 19, 75]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  22) lib/solidity/coder
       decodeParam
         should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to bytes=0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b"
Received: [19, 26, 58, 252, 0, 209, 177, 227, 70, 27, 149, 94, 83, 252, 134, 109, 207, 48, 59, 62, 185, 244, 193, 111, 137, 227, 136, 147, 15, 72, 19, 75, 35, 26, 58, 252, 0, 209, 177, 227, 70, 27, 149, 94, 83, 252, 134, 109, 207, 48, 59, 62, 185, 244, 193, 111, 137, 227, 136, 147, 15, 72, 19, 75, 51, 26, 58, 252, 0, 209, 177, 227, 70, 27, 149, 94, 83, 252, 134, 109, 207, 48, 59, 62, 185, 244, 193, 111, 137, 227, 136, 147, 15, 72, 19, 75]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  23) lib/solidity/coder
       decodeParam
         should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to bytes=0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b"
Received: [115, 26, 58, 252, 0, 209, 177, 227, 70, 27, 149, 94, 83, 252, 134, 109, 207, 48, 59, 62, 185, 244, 193, 111, 137, 227, 136, 147, 15, 72, 19, 75, 115, 26, 58, 252, 0, 209, 177, 227, 70, 27, 149, 94, 83, 252, 134, 109, 207, 48, 59, 62, 185, 244, 193, 111, 137, 227, 136, 147, 15, 72, 19, 75]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  24) lib/solidity/coder
       decodeParam
         should turn 000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a0000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to bytes[2]=0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a,0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b:
     Error: insufficient data for dynamicBytes type (arg="", coderType="dynamicBytes", value="731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a0000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b", version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at _decodeDynamicBytes (src/abi/coder.ts:555:16)
      at CoderDynamicBytes.decode (src/abi/coder.ts:583:22)
      at CoderAnonymous.decode (src/abi/coder.ts:322:27)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:677:32
      at Array.forEach (<anonymous>)
      at unpack (src/abi/coder.ts:674:12)
      at CoderArray.decode (src/abi/coder.ts:795:22)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:702:32
      at Array.forEach (<anonymous>)
      at unpackWithNames (src/abi/coder.ts:699:12)
      at CoderTuple.decode (src/abi/coder.ts:819:22)
      at AbiCoder.decode (src/abi/coder.ts:939:61)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  25) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002200000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff0000 to bytes[2]=0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff,0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  2
+ Received  + 68

  Array [
-   "0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff",
-   "0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff",
+   Uint8Array [
+     0,
+     0,
+     12,
+     140,
+     24,
+     249,
+     37,
+     40,
+     48,
+     251,
+     60,
+     86,
+     71,
+     28,
+     81,
+     51,
+     90,
+     130,
+     98,
+     241,
+     106,
+     109,
+     112,
+     226,
+     118,
+     65,
+     122,
+     124,
+     125,
+     137,
+     127,
+     97,
+     127,
+     255,
+   ],
+   Uint8Array [
+     33,
+     249,
+     37,
+     40,
+     48,
+     251,
+     60,
+     86,
+     71,
+     28,
+     81,
+     51,
+     90,
+     130,
+     98,
+     241,
+     106,
+     109,
+     112,
+     226,
+     118,
+     65,
+     122,
+     124,
+     125,
+     137,
+     127,
+     97,
+     127,
+     255,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  26) lib/solidity/coder
       decodeParam
         should turn 00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a0000000000000000000000000000000000000000000000000000000000000040731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c0000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134d to bytes[][2]=0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134a,0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c,0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134d:
     Error: insufficient data for dynamicBytes length (arg="", coderType="dynamicBytes", value="", version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at _decodeDynamicBytes (src/abi/coder.ts:537:16)
      at CoderDynamicBytes.decode (src/abi/coder.ts:583:22)
      at CoderAnonymous.decode (src/abi/coder.ts:322:27)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:677:32
      at Array.forEach (<anonymous>)
      at unpack (src/abi/coder.ts:674:12)
      at CoderArray.decode (src/abi/coder.ts:795:22)
      at CoderAnonymous.decode (src/abi/coder.ts:322:27)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:677:32
      at Array.forEach (<anonymous>)
      at unpack (src/abi/coder.ts:674:12)
      at CoderArray.decode (src/abi/coder.ts:795:22)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:702:32
      at Array.forEach (<anonymous>)
      at unpackWithNames (src/abi/coder.ts:699:12)
      at CoderTuple.decode (src/abi/coder.ts:819:22)
      at AbiCoder.decode (src/abi/coder.ts:939:61)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  27) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002200000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff00000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002200000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff0000 to bytes[][2]=0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff,0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff,0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff,0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -   4
+ Received  + 136

  Array [
    Array [
-     "0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff",
-     "0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff",
+     Uint8Array [
+       0,
+       0,
+       12,
+       140,
+       24,
+       249,
+       37,
+       40,
+       48,
+       251,
+       60,
+       86,
+       71,
+       28,
+       81,
+       51,
+       90,
+       130,
+       98,
+       241,
+       106,
+       109,
+       112,
+       226,
+       118,
+       65,
+       122,
+       124,
+       125,
+       137,
+       127,
+       97,
+       127,
+       255,
+     ],
+     Uint8Array [
+       33,
+       249,
+       37,
+       40,
+       48,
+       251,
+       60,
+       86,
+       71,
+       28,
+       81,
+       51,
+       90,
+       130,
+       98,
+       241,
+       106,
+       109,
+       112,
+       226,
+       118,
+       65,
+       122,
+       124,
+       125,
+       137,
+       127,
+       97,
+       127,
+       255,
+     ],
    ],
    Array [
-     "0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff",
-     "0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff",
+     Uint8Array [
+       0,
+       0,
+       12,
+       140,
+       24,
+       249,
+       37,
+       40,
+       48,
+       251,
+       60,
+       86,
+       71,
+       28,
+       81,
+       51,
+       90,
+       130,
+       98,
+       241,
+       106,
+       109,
+       112,
+       226,
+       118,
+       65,
+       122,
+       124,
+       125,
+       137,
+       127,
+       97,
+       127,
+       255,
+     ],
+     Uint8Array [
+       33,
+       249,
+       37,
+       40,
+       48,
+       251,
+       60,
+       86,
+       71,
+       28,
+       81,
+       51,
+       90,
+       130,
+       98,
+       241,
+       106,
+       109,
+       112,
+       226,
+       118,
+       65,
+       122,
+       124,
+       125,
+       137,
+       127,
+       97,
+       127,
+       255,
+     ],
    ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  28) lib/solidity/coder
       decodeParam
         should turn cf00000000000000000000000000000000000000000000000000000000000000 to bytes1=0xcf:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0xcf"
Received: [207]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  29) lib/solidity/coder
       decodeParam
         should turn cf0000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000004d00000000000000000000000000000000000000000000000000000000000000fb00000000000000000000000000000000000000000000000000000000000000 to bytes1[4]=0xcf,0x68,0x4d,0xfb:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  4
+ Received  + 12

  Array [
-   "0xcf",
-   "0x68",
-   "0x4d",
-   "0xfb",
+   Uint8Array [
+     207,
+   ],
+   Uint8Array [
+     104,
+   ],
+   Uint8Array [
+     77,
+   ],
+   Uint8Array [
+     251,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  30) lib/solidity/coder
       decodeParam
         should turn 6761766f66796f726b0000000000000000000000000000000000000000000000 to bytes32=0x6761766f66796f726b0000000000000000000000000000000000000000000000:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0x6761766f66796f726b0000000000000000000000000000000000000000000000"
Received: [103, 97, 118, 111, 102, 121, 111, 114, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  31) lib/solidity/coder
       decodeParam
         should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000006c3a40000c3a40000000000000000000000000000000000000000000000000000 to bytes=0xc3a40000c3a4:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0xc3a40000c3a4"
Received: [195, 164, 0, 0, 195, 164]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  32) lib/solidity/coder
       decodeParam
         should turn c3a40000c3a40000000000000000000000000000000000000000000000000000 to bytes32=0xc3a40000c3a40000000000000000000000000000000000000000000000000000:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0xc3a40000c3a40000000000000000000000000000000000000000000000000000"
Received: [195, 164, 0, 0, 195, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  33) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000100000000000000000000000000000000 to real=1:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  34) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000220000000000000000000000000000000 to real=2.125:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  35) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000880000000000000000000000000000000 to real=8.5:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  36) lib/solidity/coder
       decodeParam
         should turn ffffffffffffffffffffffffffffffff00000000000000000000000000000000 to real=-1:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  37) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000100000000000000000000000000000000 to ureal=1:
     Error: invalid type (arg="type", value="ureal", fullType={"type":"ureal","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  38) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000220000000000000000000000000000000 to ureal=2.125:
     Error: invalid type (arg="type", value="ureal", fullType={"type":"ureal","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  39) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000880000000000000000000000000000000 to ureal=8.5:
     Error: invalid type (arg="type", value="ureal", fullType={"type":"ureal","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at decodeParams (src/solidity/coder.ts:81:36)
      at Object.decodeParam (src/solidity/coder.ts:62:16)
      at Context.<anonymous> (test/coder.decodeParam.ts:11:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  40) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff100 to bytes=0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1"
Received
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  41) lib/solidity/coder
       decodeParam
         should turn 000000000000000000000000bbf289d846208c16edc8474705c748aff07732db to tuple(address)=0xbBF289D846208c16EDc8474705C748aff07732dB:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 2
+ Received  + 2

- Array [
-   "0xbBF289D846208c16EDc8474705C748aff07732dB",
+ Tuple [
+   "0xbbf289d846208c16edc8474705c748aff07732db",
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  42) lib/solidity/coder
       decodeParam
         should turn 000000000000000000000000bbf289d846208c16edc8474705c748aff07732db000000000000000000000000bbf289d846208c16edc8474705c748aff07732db to tuple(address,address)=0xbBF289D846208c16EDc8474705C748aff07732dB,0xbBF289D846208c16EDc8474705C748aff07732dB:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 3
+ Received  + 3

- Array [
-   "0xbBF289D846208c16EDc8474705C748aff07732dB",
-   "0xbBF289D846208c16EDc8474705C748aff07732dB",
+ Tuple [
+   "0xbbf289d846208c16edc8474705c748aff07732db",
+   "0xbbf289d846208c16edc8474705c748aff07732db",
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  43) lib/solidity/coder
       decodeParam
         should turn 000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000701fe517acd15ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007abcdef1234567800000000000000000000000000000000000000000000000000 to tuple(bytes,bytes)=0x01fe517acd15ff,0xabcdef12345678:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  3
+ Received  + 19

- Array [
-   "0x01fe517acd15ff",
-   "0xabcdef12345678",
+ Tuple [
+   Uint8Array [
+     1,
+     254,
+     81,
+     122,
+     205,
+     21,
+     255,
+   ],
+   Uint8Array [
+     171,
+     205,
+     239,
+     18,
+     52,
+     86,
+     120,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  44) lib/solidity/coder
       decodeParam
         should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000977686174207768617400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007abcdef1234567800000000000000000000000000000000000000000000000000 to tuple(uint256,string,bytes)=4,what what,0xabcdef12345678:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  2
+ Received  + 10

- Array [
+ Tuple [
    "4",
    "what what",
-   "0xabcdef12345678",
+   Uint8Array [
+     171,
+     205,
+     239,
+     18,
+     52,
+     86,
+     120,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  45) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000029a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000010656e636f646520796f7572206b696473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010656e636f646520796f7572207769666500000000000000000000000000000000 to tuple(uint128,string,bytes)=666,encode your kids,0x656e636f646520796f75722077696665:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  2
+ Received  + 19

- Array [
+ Tuple [
    "666",
    "encode your kids",
-   "0x656e636f646520796f75722077696665",
+   Uint8Array [
+     101,
+     110,
+     99,
+     111,
+     100,
+     101,
+     32,
+     121,
+     111,
+     117,
+     114,
+     32,
+     119,
+     105,
+     102,
+     101,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  46) lib/solidity/coder
       decodeParam
         should turn 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080aabbccddeeff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007666f6f2062617200000000000000000000000000000000000000000000000000 to tuple(string,bytes32,uint256,bool)=foo bar,0xaabbccddeeff0000000000000000000000000000000000000000000000000000,321,true:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  2
+ Received  + 35

- Array [
+ Tuple [
    "foo bar",
-   "0xaabbccddeeff0000000000000000000000000000000000000000000000000000",
+   Uint8Array [
+     170,
+     187,
+     204,
+     221,
+     238,
+     255,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+   ],
    "321",
    true,
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  47) lib/solidity/coder
       decodeParam
         should turn 0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000046669766500000000000000000000000000000000000000000000000000000000 to tuple(uint8,uint8,uint8,uint8,string,address,bool)=1,2,3,4,five,0x0000000000000000000000000000000000000006,true:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 5
+ Received  + 5

- Array [
-   "1",
-   "2",
-   "3",
-   "4",
+ Tuple [
+   1,
+   2,
+   3,
+   4,
    "five",
    "0x0000000000000000000000000000000000000006",
    true,
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:11:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  48) lib/solidity/coder
       decodeParams
         should turn 0000000000000000000000006224fe0bea79701d338cf65ebc0da0caa566c544000000000000000000000000BF79cE2fbd819e5aBC2327563D02a200255B7Cb3 to 0x6224fe0bea79701d338cf65ebc0da0caa566c544,0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 2
+ Received  + 2

- Array [
+ Tuple [
    "0x6224fe0bea79701d338cf65ebc0da0caa566c544",
-   "0xBF79cE2fbd819e5aBC2327563D02a200255B7Cb3",
+   "0xbf79ce2fbd819e5abc2327563d02a200255b7cb3",
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  49) lib/solidity/coder
       decodeParams
         should turn aa00000000000000000000000000000000000000000000000000000000000000bb00000000000000000000000000000000000000000000000000000000000000 to 0xaa,0xbb:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 3
+ Received  + 7

- Array [
-   "0xaa",
-   "0xbb",
+ Tuple [
+   Uint8Array [
+     170,
+   ],
+   Uint8Array [
+     187,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  50) lib/solidity/coder
       decodeParams
         should turn aa00000000000000000000000000000000000000000000000000000000000000bb00000000000000000000000000000000000000000000000000000000000000cc00000000000000000000000000000000000000000000000000000000000000 to 0xaa,0xbb,0xcc:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  4
+ Received  + 10

+ Tuple [
    Array [
-   Array [
-     "0xaa",
-     "0xbb",
+     Uint8Array [
+       170,
      ],
-   "0xcc",
+     Uint8Array [
+       187,
+     ],
+   ],
+   Uint8Array [
+     204,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  51) lib/solidity/coder
       decodeParams
         should turn 000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b0000000000000000000000000000000000000000000000000000000000000020731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c to 0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b,0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  3
+ Received  + 69

- Array [
-   "0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b",
-   "0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134c",
+ Tuple [
+   Uint8Array [
+     115,
+     26,
+     58,
+     252,
+     0,
+     209,
+     177,
+     227,
+     70,
+     27,
+     149,
+     94,
+     83,
+     252,
+     134,
+     109,
+     207,
+     48,
+     59,
+     62,
+     185,
+     244,
+     193,
+     111,
+     137,
+     227,
+     136,
+     147,
+     15,
+     72,
+     19,
+     75,
+   ],
+   Uint8Array [
+     115,
+     26,
+     58,
+     252,
+     0,
+     209,
+     177,
+     227,
+     70,
+     27,
+     149,
+     94,
+     83,
+     252,
+     134,
+     109,
+     207,
+     48,
+     59,
+     62,
+     185,
+     244,
+     193,
+     111,
+     137,
+     227,
+     136,
+     147,
+     15,
+     72,
+     19,
+     76,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  52) lib/solidity/coder
       decodeParams
         should turn 6761766f66796f726b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 to 0x6761766f66796f726b0000000000000000000000000000000000000000000000,5:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  2
+ Received  + 35

- Array [
-   "0x6761766f66796f726b0000000000000000000000000000000000000000000000",
+ Tuple [
+   Uint8Array [
+     103,
+     97,
+     118,
+     111,
+     102,
+     121,
+     111,
+     114,
+     107,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+   ],
    "5",
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  53) lib/solidity/coder
       decodeParams
         should turn 00000000000000000000000000000000000000000000000000000000000000056761766f66796f726b0000000000000000000000000000000000000000000000 to 5,0x6761766f66796f726b0000000000000000000000000000000000000000000000:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  2
+ Received  + 35

- Array [
+ Tuple [
    "5",
-   "0x6761766f66796f726b0000000000000000000000000000000000000000000000",
+   Uint8Array [
+     103,
+     97,
+     118,
+     111,
+     102,
+     121,
+     111,
+     114,
+     107,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+     0,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  54) lib/solidity/coder
       decodeParams
         should turn 00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000040131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b0000000000000000000000000000000000000000000000000000000000000040331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b431a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b to 5,0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b,3,0x331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b431a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -   3
+ Received  + 133

- Array [
+ Tuple [
    "5",
-   "0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b",
+   Uint8Array [
+     19,
+     26,
+     58,
+     252,
+     0,
+     209,
+     177,
+     227,
+     70,
+     27,
+     149,
+     94,
+     83,
+     252,
+     134,
+     109,
+     207,
+     48,
+     59,
+     62,
+     185,
+     244,
+     193,
+     111,
+     137,
+     227,
+     136,
+     147,
+     15,
+     72,
+     19,
+     75,
+     35,
+     26,
+     58,
+     252,
+     0,
+     209,
+     177,
+     227,
+     70,
+     27,
+     149,
+     94,
+     83,
+     252,
+     134,
+     109,
+     207,
+     48,
+     59,
+     62,
+     185,
+     244,
+     193,
+     111,
+     137,
+     227,
+     136,
+     147,
+     15,
+     72,
+     19,
+     75,
+   ],
    "3",
-   "0x331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b431a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b",
+   Uint8Array [
+     51,
+     26,
+     58,
+     252,
+     0,
+     209,
+     177,
+     227,
+     70,
+     27,
+     149,
+     94,
+     83,
+     252,
+     134,
+     109,
+     207,
+     48,
+     59,
+     62,
+     185,
+     244,
+     193,
+     111,
+     137,
+     227,
+     136,
+     147,
+     15,
+     72,
+     19,
+     75,
+     67,
+     26,
+     58,
+     252,
+     0,
+     209,
+     177,
+     227,
+     70,
+     27,
+     149,
+     94,
+     83,
+     252,
+     134,
+     109,
+     207,
+     48,
+     59,
+     62,
+     185,
+     244,
+     193,
+     111,
+     137,
+     227,
+     136,
+     147,
+     15,
+     72,
+     19,
+     75,
+   ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  55) lib/solidity/coder
       decodeParams
         should turn aa00000000000000000000000000000000000000000000000000000000000000bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to 0xaa,0xbb,true:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 3
+ Received  + 7

- Array [
+ Tuple [
    Array [
      Array [
-       "0xaa",
-       "0xbb",
+       Uint8Array [
+         170,
+       ],
+       Uint8Array [
+         187,
+       ],
      ],
    ],
    true,
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  56) lib/solidity/coder
       decodeParams
         should turn 000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to 1,2.125,true:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at getParamCoder (src/abi/coder.ts:905:43)
      at getParamCoder (src/abi/coder.ts:905:43)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at Object.decodeParams (src/solidity/coder.ts:81:36)
      at Context.<anonymous> (test/coder.decodeParam.ts:678:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  57) lib/solidity/coder
       decodeParams
         should turn 000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 to 1,2.125,true:
     Error: invalid type (arg="type", value="ureal", fullType={"type":"ureal","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at getParamCoder (src/abi/coder.ts:905:43)
      at getParamCoder (src/abi/coder.ts:905:43)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:938:44
      at Array.map (<anonymous>)
      at AbiCoder.decode (src/abi/coder.ts:938:30)
      at Object.decodeParams (src/solidity/coder.ts:81:36)
      at Context.<anonymous> (test/coder.decodeParam.ts:678:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  58) lib/solidity/coder
       decodeParams
         should turn 000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000a74686520737472696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000b736f6d6520737472696e670000000000000000000000000000000000000000001234567890123456789012345678901234567890123456789012345678901234000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000031295810000000000000000000000000000000000000000000000000000000000 to the string,56,some string,true,0x1234567890123456789012345678901234567890123456789012345678901234,0x129581:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  5
+ Received  + 42

- Array [
+ Tuple [
    "the string",
-   Array [
+   Tuple [
      "56",
      "some string",
    ],
    true,
-   Array [
-     "0x1234567890123456789012345678901234567890123456789012345678901234",
-     "0x129581",
+   Tuple [
+     Uint8Array [
+       18,
+       52,
+       86,
+       120,
+       144,
+       18,
+       52,
+       86,
+       120,
+       144,
+       18,
+       52,
+       86,
+       120,
+       144,
+       18,
+       52,
+       86,
+       120,
+       144,
+       18,
+       52,
+       86,
+       120,
+       144,
+       18,
+       52,
+       86,
+       120,
+       144,
+       18,
+       52,
+     ],
+     Uint8Array [
+       18,
+       149,
+       129,
+     ],
    ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  59) lib/solidity/coder
       decodeParams
         should turn 000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000047768617400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000269730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000046576656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000968617070656e696e6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002696eb676f64666f7273616b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047465737400000000000000000000000000000000000000000000000000000000 to hello world,what,is,even,happening,0x696e,0x74686973,0x676f64666f7273616b656e,test:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  8
+ Received  + 28

- Array [
+ Tuple [
    "hello world",
-   Array [
+   Tuple [
      "what",
      "is",
-     Array [
+     Tuple [
        "even",
        "happening",
      ],
    ],
-   "0x696e",
-   Array [
-     "0x74686973",
-     Array [
-       "0x676f64666f7273616b656e",
+   Uint8Array [
+     105,
+     110,
+   ],
+   Tuple [
+     Uint8Array [
+       116,
+       104,
+       105,
+       115,
+     ],
+     Tuple [
+       Uint8Array [
+         103,
+         111,
+         100,
+         102,
+         111,
+         114,
+         115,
+         97,
+         107,
+         101,
+         110,
+       ],
        "test",
      ],
    ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  60) lib/solidity/coder
       decodeParams
         should turn 00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000000474686973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000026973000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000076d61646e65737300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d6275742049206c6f76652069740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000106265636175736520697420776f726b7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000112345678901234567890123456789012345678901234567890123456789012340000000000000000000000001337133713371337133713371337133713371337000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000206265636175736520697420776f726b736265636175736520697420776f726b73 to this,true,is,true,utter,true,madness,0x1234567890123456789012345678901234567890123456789012345678901234,0x6275742049206c6f7665206974,0x6265636175736520697420776f726b73,true,0x1234567890123456789012345678901234567890123456789012345678901234,0x1337133713371337133713371337133713371337,0x6265636175736520697420776f726b736265636175736520697420776f726b73:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  12
+ Received  + 142

- Array [
+ Tuple [
    "this",
    true,
-   Array [
+   Tuple [
      "is",
-     Array [
-       Array [
+     Tuple [
+       Tuple [
          true,
          "utter",
          true,
        ],
-       Array [
+       Tuple [
          "madness",
-         "0x1234567890123456789012345678901234567890123456789012345678901234",
-         "0x6275742049206c6f7665206974",
+         Uint8Array [
+           18,
+           52,
+           86,
+           120,
+           144,
+           18,
+           52,
+           86,
+           120,
+           144,
+           18,
+           52,
+           86,
+           120,
+           144,
+           18,
+           52,
+           86,
+           120,
+           144,
+           18,
+           52,
+           86,
+           120,
+           144,
+           18,
+           52,
+           86,
+           120,
+           144,
+           18,
+           52,
+         ],
+         Uint8Array [
+           98,
+           117,
+           116,
+           32,
+           73,
+           32,
+           108,
+           111,
+           118,
+           101,
+           32,
+           105,
+           116,
+         ],
        ],
      ],
    ],
-   "0x6265636175736520697420776f726b73",
-   Array [
+   Uint8Array [
+     98,
+     101,
+     99,
+     97,
+     117,
+     115,
+     101,
+     32,
+     105,
+     116,
+     32,
+     119,
+     111,
+     114,
+     107,
+     115,
+   ],
+   Tuple [
      true,
-     Array [
-       "0x1234567890123456789012345678901234567890123456789012345678901234",
+     Tuple [
+       Uint8Array [
+         18,
+         52,
+         86,
+         120,
+         144,
+         18,
+         52,
+         86,
+         120,
+         144,
+         18,
+         52,
+         86,
+         120,
+         144,
+         18,
+         52,
+         86,
+         120,
+         144,
+         18,
+         52,
+         86,
+         120,
+         144,
+         18,
+         52,
+         86,
+         120,
+         144,
+         18,
+         52,
+       ],
        "0x1337133713371337133713371337133713371337",
      ],
-     "0x6265636175736520697420776f726b736265636175736520697420776f726b73",
+     Uint8Array [
+       98,
+       101,
+       99,
+       97,
+       117,
+       115,
+       101,
+       32,
+       105,
+       116,
+       32,
+       119,
+       111,
+       114,
+       107,
+       115,
+       98,
+       101,
+       99,
+       97,
+       117,
+       115,
+       101,
+       32,
+       105,
+       116,
+       32,
+       119,
+       111,
+       114,
+       107,
+       115,
+     ],
    ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  61) lib/solidity/coder
       decodeParams
         should turn 00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000001b3f5fe0fd513e6cbdee459f0b0e19095fe91958000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001774686973206973206d6f726520726561736f6e61626c6500000000000000000000000000000000000000000000000000000000000000000000000000000000096c6f6c6f6c6f6c6f6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d13b6e9058e58b8677233cec2315e1d9e77c79c40000000000000000000000000000000000000000000000000000000000000007abcdef1234567800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000787654321fedcba00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000662617a6261720000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000060fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000b1eef147028e9f480dbc5ccaa3277d417d1b85f00000000000000000000000000000000000000000000000000000000000000006666f6f6261720000000000000000000000000000000000000000000000000000 to this is more reasonable,true,false,0x1b3F5FE0Fd513E6cbdEE459F0b0e19095FE91958,0x6c6f6c6f6c6f6c6f6c,0xabcdef12345678,0x87654321fedcba,bazbar,false,0xd13b6e9058E58B8677233CEc2315e1D9e77C79C4,-6,-7,5,foobar,-8,0xB1eeF147028E9f480DbC5ccaA3277D417D1b85F0:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  - 15
+ Received  + 41

- Array [
-   Array [
+ Tuple [
+   Tuple [
      "this is more reasonable",
-     Array [
+     Tuple [
        true,
        false,
      ],
    ],
-   "0x1b3F5FE0Fd513E6cbdEE459F0b0e19095FE91958",
-   "0x6c6f6c6f6c6f6c6f6c",
-   Array [
-     "0xabcdef12345678",
-     "0x87654321fedcba",
+   "0x1b3f5fe0fd513e6cbdee459f0b0e19095fe91958",
+   Uint8Array [
+     108,
+     111,
+     108,
+     111,
+     108,
+     111,
+     108,
+     111,
+     108,
+   ],
+   Tuple [
+     Uint8Array [
+       171,
+       205,
+       239,
+       18,
+       52,
+       86,
+       120,
+     ],
+     Uint8Array [
+       135,
+       101,
+       67,
+       33,
+       254,
+       220,
+       186,
+     ],
      "bazbar",
      false,
-     "0xd13b6e9058E58B8677233CEc2315e1D9e77C79C4",
+     "0xd13b6e9058e58b8677233cec2315e1d9e77c79c4",
    ],
-   "-6",
-   Array [
-     "-7",
+   "1.1579208923731619542357098500868790785326998466564056403945758400791312963993e+77",
+   Tuple [
+     "1.15792089237316195423570985008687907853269984665640564039457584007913129639929e+77",
      "5",
-     Array [
+     Tuple [
        "foobar",
-       "-8",
-       "0xB1eeF147028E9f480DbC5ccaA3277D417D1b85F0",
+       "1.15792089237316195423570985008687907853269984665640564039457584007913129639928e+77",
+       "0xb1eef147028e9f480dbc5ccaa3277d417d1b85f0",
      ],
    ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  62) lib/solidity/coder
       decodeParams
         should turn ffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae0000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae00000000000000000000000012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000160000000000000000000000000123456789012345678901234567890123456789000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001234567890123456789012345678901234567890ffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbaeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa28bbc0000000000000000000000000000000000000000000000000000000000015ba80ab3e6dfa1594c15af0000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000006737472696e670000000000000000000000000000000000000000000000000000 to 0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae,true,0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae,0x1234567890123456789012345678901234567890,0x0ab3e6dfa1594c15af0000000000000000000000000000000000000000000000,0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae,string,0x1234567890123456789012345678901234567890,true,0x1234567890123456789012345678901234567890,0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae,-6124612,89000:
     Error: expect(received).toEqual(expected) // deep equality

- Expected  -  13
+ Received  + 178

- Array [
-   Array [
-     "0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae",
+ Tuple [
+   Tuple [
+     Uint8Array [
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       171,
+       222,
+       241,
+       35,
+       132,
+       145,
+       129,
+       117,
+       154,
+       222,
+       191,
+       173,
+       236,
+       174,
+       251,
+       174,
+     ],
      true,
-     "0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae",
+     Uint8Array [
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       171,
+       222,
+       241,
+       35,
+       132,
+       145,
+       129,
+       117,
+       154,
+       222,
+       191,
+       173,
+       236,
+       174,
+       251,
+       174,
+     ],
    ],
    "0x1234567890123456789012345678901234567890",
-   Array [
-     "0x0ab3e6dfa1594c15af0000000000000000000000000000000000000000000000",
-     "0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae",
+   Tuple [
+     Uint8Array [
+       10,
+       179,
+       230,
+       223,
+       161,
+       89,
+       76,
+       21,
+       175,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+       0,
+     ],
+     Uint8Array [
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       255,
+       171,
+       222,
+       241,
+       35,
+       132,
+       145,
+       129,
+       117,
+       154,
+       222,
+       191,
+       173,
+       236,
+       174,
+       251,
+       174,
+     ],
      "string",
    ],
-   Array [
-     Array [
+   Tuple [
+     Tuple [
        "0x1234567890123456789012345678901234567890",
        true,
      ],
-     Array [
+     Tuple [
        "0x1234567890123456789012345678901234567890",
-       "0xffffffffffffffffffffffffffffffffabdef123849181759adebfadecaefbae",
+       Uint8Array [
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         255,
+         171,
+         222,
+         241,
+         35,
+         132,
+         145,
+         129,
+         117,
+         154,
+         222,
+         191,
+         173,
+         236,
+         174,
+         251,
+         174,
+       ],
      ],
-     Array [
-       "-6124612",
+     Tuple [
+       "1.15792089237316195423570985008687907853269984665640564039457584007913123515324e+77",
        "89000",
      ],
    ],
  ]
      at Context.<anonymous> (test/coder.decodeParam.ts:678:113)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  63) lib/solidity/coder
       encodeParam
         should turn int 3.9 to 0000000000000000000000000000000000000000000000000000000000000003:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0000000000000000000000000000000000000000000000000000000000000003"
Received: "0000000000000000000000000000000000000000000000000000000000000004"
      at Context.<anonymous> (test/coder.encodeParam.ts:10:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  64) lib/solidity/coder
       encodeParam
         should turn uint 3.9 to 0000000000000000000000000000000000000000000000000000000000000003:
     Error: expect(received).toEqual(expected) // deep equality

Expected: "0000000000000000000000000000000000000000000000000000000000000003"
Received: "0000000000000000000000000000000000000000000000000000000000000004"
      at Context.<anonymous> (test/coder.encodeParam.ts:10:90)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  65) lib/solidity/coder
       encodeParam
         should turn bytes64 0xc3a40000c3a40000000000000000000000000000000000000000000000000000c3a40000c3a40000000000000000000000000000000000000000000000000000 to c3a40000c3a40000000000000000000000000000000000000000000000000000c3a40000c3a40000000000000000000000000000000000000000000000000000:
     Error: invalid bytes length (arg="param", value={"type":"bytes64","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:893:20)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  66) lib/solidity/coder
       encodeParam
         should turn real 1 to 0000000000000000000000000000000100000000000000000000000000000000:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  67) lib/solidity/coder
       encodeParam
         should turn real 2.125 to 0000000000000000000000000000000220000000000000000000000000000000:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  68) lib/solidity/coder
       encodeParam
         should turn real 8.5 to 0000000000000000000000000000000880000000000000000000000000000000:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  69) lib/solidity/coder
       encodeParam
         should turn real -1 to ffffffffffffffffffffffffffffffff00000000000000000000000000000000:
     Error: invalid type (arg="type", value="real", fullType={"type":"real","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  70) lib/solidity/coder
       encodeParam
         should turn ureal 1 to 0000000000000000000000000000000100000000000000000000000000000000:
     Error: invalid type (arg="type", value="ureal", fullType={"type":"ureal","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  71) lib/solidity/coder
       encodeParam
         should turn ureal 2.125 to 0000000000000000000000000000000220000000000000000000000000000000:
     Error: invalid type (arg="type", value="ureal", fullType={"type":"ureal","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  72) lib/solidity/coder
       encodeParam
         should turn ureal 8.5 to 0000000000000000000000000000000880000000000000000000000000000000:
     Error: invalid type (arg="type", value="ureal", fullType={"type":"ureal","name":""}, version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at getParamCoder (src/abi/coder.ts:913:19)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:934:44
      at Array.map (<anonymous>)
      at AbiCoder.encode (src/abi/coder.ts:934:30)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  73) lib/solidity/coder
       encodeParam
         should turn tuple(bool,tuple(bytes32,int256,tuple(bytes24,bytes8)),tuple(bool,bool,bool),string) true,0xabdef,-18291849,0xabdef18710a18a18abdef18710a18a18abdef18710a18a18,0xabdef18710a18a18,false,true,false,testing testing to 00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001abdef00000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffee8e377abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000abdef18710a18a180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000f74657374696e672074657374696e670000000000000000000000000000000000:
     Error: invalid bytes32 value (arg="", coderType="bytes32", value="0xabdef", version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderFixedBytes.encode (src/abi/coder.ts:469:20)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at AbiCoder.encode (src/abi/coder.ts:935:61)
      at encodeParams (src/solidity/coder.ts:50:50)
      at Object.encodeParam (src/solidity/coder.ts:38:16)
      at Context.<anonymous> (test/coder.encodeParam.ts:10:36)
      at processImmediate (internal/timers.js:461:21)
      at process.topLevelDomainCallback (domain.js:144:15)
      at process.callbackTrampoline (internal/async_hooks.js:129:14)

  74) integration.erc20
       ganache(injected):
         test allowance, invalid address:
     Error: expect(received).rejects.toThrow(expected)

Expected substring: "Invalid address"
Received message:   "invalid address format (arg=\"_spender\", coderType=\"address\", value=\"0x1\", version=1)"

      68 |     try {
      69 |       messageDetails.push(key + '=' + JSON.stringify(params[key]))
    > 70 |     } catch (error) {
         |                 ^
      71 |       messageDetails.push(key + '=' + JSON.stringify(params[key].toString()))
      72 |     }
      73 |   })

      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderAddress.encode (src/abi/coder.ts:498:20)
      at src/abi/coder.ts:636:59
          at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at AbiCoder.encode (src/abi/coder.ts:935:61)
      at Object.encodeParams (src/solidity/coder.ts:50:50)
      at SolidityFunction.toPayload (src/SolidityFunction.ts:80:36)
      at SolidityFunction.execute (src/SolidityFunction.ts:123:34)
      at Contract.allowance (src/SolidityFunction.ts:159:25)
      at Context.<anonymous> (test/integration.erc20.ts:180:36)
          at runMicrotasks (<anonymous>)
      at Object.toThrow (node_modules/expect/build/index.js:241:20)
      at Context.<anonymous> (test/integration.erc20.ts:180:75)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:93:5)

  75) integration.erc20
       ganache(injected):
         test allowance with malformed addressess:
     Error: invalid address format (arg="_owner", coderType="address", value=" 0xebc757b8bfd562158b1bfded4e1cafe332d9845a ", version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderAddress.encode (src/abi/coder.ts:498:20)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at AbiCoder.encode (src/abi/coder.ts:935:61)
      at Object.encodeParams (src/solidity/coder.ts:50:50)
      at SolidityFunction.toPayload (src/SolidityFunction.ts:80:36)
      at SolidityFunction.execute (src/SolidityFunction.ts:123:34)
      at Contract.allowance (src/SolidityFunction.ts:159:25)
      at Context.<anonymous> (test/integration.erc20.ts:200:55)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:93:5)

  76) integration.erc20
       ganache(http):
         test allowance, invalid address:
     Error: expect(received).rejects.toThrow(expected)

Expected substring: "Invalid address"
Received message:   "invalid address format (arg=\"_spender\", coderType=\"address\", value=\"0x1\", version=1)"

      68 |     try {
      69 |       messageDetails.push(key + '=' + JSON.stringify(params[key]))
    > 70 |     } catch (error) {
         |                 ^
      71 |       messageDetails.push(key + '=' + JSON.stringify(params[key].toString()))
      72 |     }
      73 |   })

      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderAddress.encode (src/abi/coder.ts:498:20)
      at src/abi/coder.ts:636:59
          at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at AbiCoder.encode (src/abi/coder.ts:935:61)
      at Object.encodeParams (src/solidity/coder.ts:50:50)
      at SolidityFunction.toPayload (src/SolidityFunction.ts:80:36)
      at SolidityFunction.execute (src/SolidityFunction.ts:123:34)
      at Contract.allowance (src/SolidityFunction.ts:159:25)
      at Context.<anonymous> (test/integration.erc20.ts:180:36)
          at runMicrotasks (<anonymous>)
      at Object.toThrow (node_modules/expect/build/index.js:241:20)
      at Context.<anonymous> (test/integration.erc20.ts:180:75)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:93:5)

  77) integration.erc20
       ganache(http):
         test allowance with malformed addressess:
     Error: invalid address format (arg="_owner", coderType="address", value=" 0xebc757b8bfd562158b1bfded4e1cafe332d9845a ", version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderAddress.encode (src/abi/coder.ts:498:20)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at AbiCoder.encode (src/abi/coder.ts:935:61)
      at Object.encodeParams (src/solidity/coder.ts:50:50)
      at SolidityFunction.toPayload (src/SolidityFunction.ts:80:36)
      at SolidityFunction.execute (src/SolidityFunction.ts:123:34)
      at Contract.allowance (src/SolidityFunction.ts:159:25)
      at Context.<anonymous> (test/integration.erc20.ts:200:55)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:93:5)

  78) integration.erc20
       geth(ws):
         test allowance, invalid address:
     Error: expect(received).rejects.toThrow(expected)

Expected substring: "Invalid address"
Received message:   "invalid address format (arg=\"_spender\", coderType=\"address\", value=\"0x1\", version=1)"

      68 |     try {
      69 |       messageDetails.push(key + '=' + JSON.stringify(params[key]))
    > 70 |     } catch (error) {
         |                 ^
      71 |       messageDetails.push(key + '=' + JSON.stringify(params[key].toString()))
      72 |     }
      73 |   })

      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderAddress.encode (src/abi/coder.ts:498:20)
      at src/abi/coder.ts:636:59
          at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at AbiCoder.encode (src/abi/coder.ts:935:61)
      at Object.encodeParams (src/solidity/coder.ts:50:50)
      at SolidityFunction.toPayload (src/SolidityFunction.ts:80:36)
      at SolidityFunction.execute (src/SolidityFunction.ts:123:34)
      at Contract.allowance (src/SolidityFunction.ts:159:25)
      at Context.<anonymous> (test/integration.erc20.ts:180:36)
          at runMicrotasks (<anonymous>)
      at Object.toThrow (node_modules/expect/build/index.js:241:20)
      at Context.<anonymous> (test/integration.erc20.ts:180:75)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:93:5)

  79) integration.erc20
       geth(ws):
         test allowance with malformed addressess:
     Error: invalid address format (arg="_owner", coderType="address", value=" 0x9c7de83416d367fbd56145d6213e9f36c978ec54 ", version=1)
      at Object.throwError (src/abi/errors.ts:70:17)
      at CoderAddress.encode (src/abi/coder.ts:498:20)
      at /Users/rutherford/code/eth-connect/src/abi/coder.ts:636:59
      at Array.forEach (<anonymous>)
      at pack (src/abi/coder.ts:635:12)
      at CoderTuple.encode (src/abi/coder.ts:816:16)
      at AbiCoder.encode (src/abi/coder.ts:935:61)
      at Object.encodeParams (src/solidity/coder.ts:50:50)
      at SolidityFunction.toPayload (src/SolidityFunction.ts:80:36)
      at SolidityFunction.execute (src/SolidityFunction.ts:123:34)
      at Contract.allowance (src/SolidityFunction.ts:159:25)
      at Context.<anonymous> (test/integration.erc20.ts:200:55)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:93:5)



